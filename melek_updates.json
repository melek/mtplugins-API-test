{
  "Lib:CustomCounters": {"1.0":   {
    "mtversion": "1.8.4",
    "timestamp": "2021-04-04T20:31:40.8115515-07:00",
    "notes": "",
    "gmnotes": "Custom Counters v1.0\n\nThis library contains a drop-in macro called 'Custom Counters' that can be used from anywhere in a campaign to track any kind of simple resources, a lot like using glass counters during a tabletop game.\n\nTo get started, select the token you which to update with custom counters, and click on the macro button. You can add, increment/decrement, and edit counters from the list. You can additionally place the 'Show Counters' button in the Campaign, GM, or any Token macro panel to call the macro remotely.\n\n<u>Options<\/u>\nThere are a few options you can set by changing their definitions in the macro. If you aren't using the Custom Counters macro by reference, it is recommended to do this before copying the macro anywhere in your campaign.\n<b>vPropertyName<\/b>: This is the name of the Token Property the macro stores custom counter JSON data inside of. Change this if you already use 'CustomCounters' as a property name or want to use a different name. You can also add this as a defined token property to edit counters directly from the Edit Token dialog.\n<b>vCounterCategories<\/b>: This is a list of categories for counters. The default list was made to fit well for Dungeons and Dragons 5th Edition, but you can customize it for any game system.\n<b>vCounterTypeList<\/b>: This is a list of reset types. The 'Keys' repesent the option text in the Add/Edit counter dialog box, and the value is the actual counter type that is recorded on the token. The default counter type is an empty string/null value which creates a simple counter without a maximum value. All others create a maximum value.\n\n<u>Getting Fancy<\/u>\nYou can copy-past the 'Adjust Counter' macro to make your own special counte radjustment macros, or call it from another macro to increment the counters.\nYou can use Counter Types to reset or affect a counter based on a condition in another macro. For instance, you can have a 'Short Rest' macro that looks for any counters with 'Short Rest' as the counter type and then resets the value to maximum. You can see the 'Short Rest' and 'Long Rest' macros in my Simple 5e library for examples.\n\nTo change the counter values programmatically, you will need to write macros using JSON. The data format is very simple array of objects with up to 5 keys: 'name', 'category', 'value', and optionally 'max' and 'type'.\n\nThere are no property dependencies in these macros that aren't configurable, and the core macro in particular is extremely portable and will work from any macro panel. \n\nHave Fun!",
    "properties":     {
      "AC": "",
      "Acrobatics": "",
      "AnimalHandling": "",
      "Arcana": "",
      "Artificer": "",
      "Athletics": "",
      "Backstory": "",
      "Barbarian": "",
      "Bard": "",
      "ChaMod": "",
      "ChaSave": "",
      "CharLevel": "",
      "Charisma": "",
      "Class": "",
      "Cleric": "",
      "ConMod": "",
      "ConSave": "",
      "Concentration": "",
      "Constitution": "",
      "Creaturetype": "",
      "CustomCounters": [],
      "DeathFails": "",
      "DeathSuccesses": "",
      "Deception": "",
      "Description": "",
      "DexMod": "",
      "DexSave": "",
      "Dexterity": "",
      "DisplayHP": "",
      "Druid": "",
      "Elevation": "",
      "Exhaustion": "",
      "Fighter": "",
      "HD10": "",
      "HD12": "",
      "HD20": "",
      "HD4": "",
      "HD6": "",
      "HD8": "",
      "HP": "",
      "History": "",
      "HitDieUsed": "",
      "Initiative": "",
      "InitiativeBonus": "",
      "Insight": "",
      "IntMod": "",
      "IntSave": "",
      "Intelligence": "",
      "Intimidation": "",
      "Investigation": "",
      "MaxHP": "",
      "Medicine": "",
      "Monk": "",
      "Nature": "",
      "Paladin": "",
      "PassiveInsight": "",
      "PassivePerception": "",
      "Perception": "",
      "Performance": "",
      "Persuasion": "",
      "PresentationGender": "",
      "Proficiency": "",
      "PronounAbsolutePossessive": "",
      "PronounObjective": "",
      "PronounPossessive": "",
      "PronounSubjective": "",
      "Race": "",
      "Ranger": "",
      "ReadyAction": "",
      "Religion": "",
      "Rogue": "",
      "Senses": "",
      "Simple5eData": "",
      "SleightOfHand": "",
      "Sorcerer": "",
      "Speed": "",
      "Stealth": "",
      "StrMod": "",
      "StrSave": "",
      "Strength": "",
      "Survival": "",
      "TempHP": "",
      "TempMaxHP": "",
      "TrueClass": "",
      "TrueRace": "",
      "Unconverted5eMob": "",
      "UsedHD10": "",
      "UsedHD12": "",
      "UsedHD20": "",
      "UsedHD4": "",
      "UsedHD6": "",
      "UsedHD8": "",
      "Warlock": "",
      "WisMod": "",
      "WisSave": "",
      "Wisdom": "",
      "Wizard": "",
      "__BOBIFLE_COMPATIBILITY__": "",
      "__CHARACTER_META_ATTRIBUTES__": "",
      "__CLASS_RACE_HD__": "",
      "__GM_META__": "",
      "__MECHANICS_META__": "",
      "__MODIFIERS__": "",
      "__SAVES__": "",
      "__SKILLS__": "",
      "__STATES_META__": "",
      "__STATS__": "",
      "___JSON_AND_LIBRARY_PROPERTIES___": "",
      "____CLASS_LEVELS____": "",
      "____HD____": "",
      "____MAKE_PROPERTIES_EDITABLE____": "",
      "____POST_CONVERSION_BACKUP_PROPERTIES____": "",
      "eHP": "",
      "eMaxHP": "",
      "libAuthor": "Melek / Lionel Di Giacomo",
      "libDefaults": "",
      "libSettings": "",
      "libVersion": 1,
      "mCR": "",
      "mPerception": "",
      "mSpeed": "",
      "mname": ""
    },
    "macros":     [
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "default",
        "group": "1. Core Macro",
        "includeLabel": false,
        "sortBy": "",
        "index": 1,
        "label": "Custom Counters",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h, code: {\"\n\t<!-- This is an Advanced Macro\n\t\n\tBe default, show the user a menu of options. \n\tThis can be overwritten by a passed 'Mode' \n\targument in a json object when calling this \n\tmacro from another macro. \n\t\n\tValid modes are:\n\t\tCloseMenu - Closes the dialog\n\t\tCounter Manager - Displays the counters in a table\n\t\tAdd New Counter - Adds or edits one counter\n\t\tAdjust Counter - Adds or Subtracts from a counter\n\t\tClear Counters - Removes one or all counters\n\n\tThis is a generic version of this macro which was\n\toriginally written for Melek's Simple 5e framework:\n\t\n\t-->\"}]\n\n[h: \"<!-- Set default category options and expected property name. -->\"]\n[h: vPropertyName = \"CustomCounters\"]\n[h: vCounterCategories = \"Backpack, Class, Race, Special, Spells\"]\n[h: vCounterTypeList = json.set(\"{}\" , \n\t\t\"Simple/No Max Value\", \"\",\n\t\t\"Resets on Long Rest\", \"Long Rest\",\t\n\t\t\"Resets on Short and Long Rest\", \"Short Rest\",\n\t\t\"Has Max without reset (Adv.)\", \"Manual\")]\n\n[h: \"<!-- Set default arguments -->\"]\n[h: vMode = \"Counter Manager\"]\n[h: vCounterToClear = \"\"]\n[h: vCounterToEdit = \"\"]\n[h: vInfo = isGM()]\n\n[h: \"<!-- Accept passed arguments and set non-configurable variables -->\"]\n[h: json.toVars(macro.args, \"v\")]\n[h: vDialogName = \"Custom Counters\"]\n[h: vThisMacro = getMacroName() + \"@\" + \n\tif(listGet(getMacroLocation(), 0, \":\") == \"Token\", \"TOKEN\", getMacroLocation())]\n\n[h: \"<!-- Use getProperty() for compatibility -->\"]\n[h: vCustomCounters = getProperty(vPropertyName)]\n\n[h: \"<!-- Perform some validation -->\"]\n[h: vSelectedCount = listCount(getSelected())]\n[h, if(vSelectedCount != 1), code: {\n\t[vFirstSelected = listGet(getSelected(), 0)]\n\t[if(currentToken() == vFirstSelected): \n\t\tassert(0, getMacroName() + \" Error: This macro can only be run on a single token at a time! You have \" + vSelectedCount + \" tokens selected.\");\n\t\tabort(0)]\n}]\n\n[h, if(json.length(vCustomCounters) > 0): vNumberOfCounters = \n\ttoken.name + \" has \" + json.length(vCustomCounters) + \" custom counter\" + \n\tif(json.length(vCustomCounters) > 1, \"s\", \"\") + \".<hr>\"; \n\tvNumberOfCounters = token.name + \" has no custom counters.<hr>\"]\n\n\t\t\n[h, if(vInfo): log.info(\"vCustomCounters type: \" + json.type(vCustomCounters))]\n[h, if(json.type(vCustomCounters) != \"ARRAY\"), code: {\n\t[if(length(vCustomCounters) == 0): vCustomCounters = \"[]\"; \n\t\tassert(0, \"<html>\" + getMacroName() + \" <br>vCustomCounters: \" + vCustomCounters + \"<\/html>\", 0)]\n\t[if(vInfo): log.info(\"Validated successful, set vCustomCounters to blank JSON array...\")]\t\t\n};{\n\t[if(vInfo): log.info(\"Validation successful...\")]\n}]\n\n[h, if(vInfo): log.info(\"Inital mode: \" + vMode)]\n[h, if(vMode == \"CloseMenu\"), code: {\n\t[if(vLastToken != getSelected()): closeDialog(vDialogName)]\n};{}]\n\n[h, if(vMode == \"Counter Manager\"), code: {\n\t[if(vInfo): log.info(\"Entering Menu Dialog...\")]\n\n\t<!-- These color variables are the same as the default Character Sheet. -->\n\t[vSheetColor = \"#faefe0\"]\n\t[vHeaderTextColor = \"#700000\"]\n\t[vBorderColor = \"#af7070\"]\n\t[vBoxHeaderTextColor = \"black\"]\n\t[vBoxHeaderBackgroundColor = \"#E0E0E0\"]\n\t[vBoxColor = \"white\"]\n\t[vBoxColorAlt = \"#EFEFFF\"]\t\n\t[vBoxTextColor = \"black\"]\t\n\t[vAdjustLinkStyle = 'text-decoration:inherit;']\t\n\t[vBoxWidth = 275]\n\n\t[vEventLinkArgs = json.set(\"{}\", \"Mode\", \"CloseMenu\", \"LastToken\", currentToken())]\n\t[vEventLink = \"<link rel='onChangeSelection' type='macro' href='\" + \n\t\tmacroLinkText(vThisMacro, \"none\", vEventLinkArgs, \"selected\") + \"'>\"]\n\t[vMenuHeader = \"<h2 style='color:\" + vHeaderTextColor + \"'>Add & Edit Counters<\/h2>\"]\n\t[vMenuHeader = vMenuHeader + vNumberOfCounters]\n\t[vMenuLink.addCounter = macroLink(\n\t\t\"Add New Counter\", vThisMacro, \"none\", json.set(\"{}\", \"Mode\", \"Add New Counter\"), \"selected\")]\t\n\t[vMenuLink.removeCounters = macroLink(\n\t\t\"<span style='color:red'>Clear All Counters<\/span>\", vThisMacro, \"none\", json.set(\"{}\", \"Mode\", \"Clear Counters\"),\t\"selected\")]\n\t[if(json.length(vCustomCounters) > 0): \n\t\tvMenuLinks = \"<table style='margin-bottom:8px;width:\" + vBoxWidth + \"px'><tr><td>\" + \n\t\t\tvMenuLink.addCounter + \"<\/td><td align=right>\" + \n\t\t\tvMenuLink.removeCounters + \"<\/td><\/tr><\/table>\";\n\t\tvMenuLinks = \"<h3 style='margin-bottom:4px;'>\" + vMenuLink.addCounter + \"<\/h3>\" + \"\n\t\t\t<div style='margin: 0 16px; padding:0 ; font-size:12px;'>\n\t\t\t<p>Use custom counters to track spells, abilities, ammo,\n\t\t\trations, and anything more you can imagine!<\/p>\n\t\t\t<p>Custom counters can be incremented on this panel or with \n\t\t\tmacro buttons you create.<\/p><\/div>\"]\n\t\t\n\t[vCounterList = json.sort(vCustomCounters, \"asc\", \"name\", \"category\")]\n\t[vCounterEntryTH = \"<td style='border:1px solid \" + vBorderColor + \"; border-right: 0; border-bottom: 0;'>\"]\n\t[vCounterEntryTHCenter = \"<td style='border: 1px solid \" + vBorderColor + \"; border-right: 0; border-bottom: 0; text-align: center;'>\"]\n\t[vCounterMenu = \"<table cellspacing=0 style='width:\" + vBoxWidth + \"px;'><tr style='font-weight:bold;\" + \n\t\t\t\"background-color: \" + vBoxHeaderBackgroundColor + \n\t\t\t\";color: \" + vBoxHeaderTextColor + \n\t\t\t\";border-right: 1px solid \" + vBorderColor + \";'>\" + \n\t\tvCounterEntryTH + \"Category<\/th>\" +\n\t\tvCounterEntryTH + \"Name<\/th>\" +\n\t\tvCounterEntryTH + \"Reset<\/th>\" +\n\t\tvCounterEntryTH + \"Value<\/th>\" + \n\t\tvCounterEntryTHCenter + \"+ / -<\/th>\" +\n\t\tvCounterEntryTH + \"Edit<\/th>\" +\n\t\tvCounterEntryTH + \"✖<\/th>\"] \n\t[foreach(vCounter, vCounterList, \"\"), code: {\n\t\t[vEditLink = macroLink(\"<span style='text-decoration:none;'>Edit<\/span>\", vThisMacro, \"none\", json.set(\"{}\", \"Mode\", \"Add New Counter\", \"CounterToEdit\", vCounter), \"selected\")]\n\t\t[vClearLink = macroLink(\"<span style='color:red;text-decoration:none;'>✖<\/span>\", vThisMacro, \"none\", json.set(\"{}\",  \"Mode\", \"Clear Counters\", \"CounterToClear\", vCounter), \"selected\")]\n\t\t[vCounterName = json.get(vCounter, \"name\")]\n\t\t[vCounterCat = json.get(vCounter, \"category\")]\n\t\t[vCounterValue = json.get(vCounter, \"value\")]\n\t\t[vCounterMax = json.get(vCounter, \"max\")]\n\t\t[vCounterType = json.get(vCounter, \"reset\")]\n\t\t[vCounterEntryIsOdd = math.mod(json.indexOf(vCounterList, vCounter), 2)]\n\t\t[vCounterLastRow = if(json.indexOf(vCounterList, vCounter) == json.length(vCounterList) - 1, \"border-bottom:1px solid \" + vBorderColor + \";\", \"border-bottom: 0;\")]\n\t\t[vCounterEntryTD = \"<td style='border:1px solid \" + vBorderColor + \"; border-right: 0; border-bottom: 0;'>\"]\n\t\t[vCounterEntryTDCenter = \"<td style='border:1px solid \" + vBorderColor + \"; border-right: 0; border-bottom: 0; text-align: center;'>\"]\n\t\t[vCounterMenu = vCounterMenu + \"<tr style='border-right: 1px solid \" + vBorderColor + \";\" + vCounterLastRow + \" background-color: \" + if(vCounterEntryIsOdd, vBoxColor, vBoxColorAlt) + \";'>\" + \n\t\t\tvCounterEntryTD + vCounterCat + \"<\/td>\" + \n\t\t\tvCounterEntryTD + vCounterName + \"<\/td>\" + \n\t\t\tvCounterEntryTD + vCounterType + \"<\/td>\" + \n\t\t\tvCounterEntryTD + vCounterValue + (if(isNumber(vCounterMax), \" / \" + vCounterMax, \"\"))  + \"<\/td>\" + \n\t\t\tvCounterEntryTDCenter + \n\t\t\t\"<a href='\" + \n\t\t\tmacroLinkText( vThisMacro, \"none\", \n\t\t\t\tjson.set(\"{}\", \n\t\t\t\t\t\"Mode\", \"Adjust Counter\", \n\t\t\t\t\t\"CounterName\", json.get(vCounter, \"name\"), \n\t\t\t\t\t\"CounterAdjustment\", 1), currentToken()) + \n\t\t\t\"' style='\" + vAdjustLinkStyle + \"' title='Add 1'><span title='Add 1'>+<\/span><\/a>  \" + \n\t\t\t\"<a href='\" + \n\t\t\tmacroLinkText( vThisMacro, \"none\", \n\t\t\t\tjson.set(\"{}\", \n\t\t\t\t\t\"Mode\", \"Adjust Counter\", \n\t\t\t\t\t\"CounterName\", json.get(vCounter, \"name\"), \n\t\t\t\t\t\"CounterAdjustment\", -1), currentToken()) + \n\t\t\t\"' style='\" + vAdjustLinkStyle + \"' title='Subtract 1'><span title='Subtract 1'>-<\/span><\/a> \" +\n\t\t\t\"<\/td>\" + \n\t\t\tvCounterEntryTD + vEditLink + \"<\/td>\" + \n\t\t\tvCounterEntryTD + vClearLink + \"<\/td><\/tr>\"]\n\t}]\n\t[vCounterMenu = vCounterMenu + \"<\/table>\"]\t\n\t\t\t\t\n\t[frame(vDialogName, \"temporary=0;width=450;height=375\"): { \n\t\t<html>\n\t\t<head>\n\t\t\t[r:vEventLink]\n\t\t<\/head>\n\t\t<body style=\"text-align:center;background-color:[r: vSheetColor];\">\n\t\t\t[r: vMenuHeader]\n\t\t\t[r: vMenuLinks]\n\t\t\t[r, if(json.length(vCustomCounters) > 0): vCounterMenu]\n\t\t<\/body>\n\t\t<\/html>}]\n};{\n\t[if(vInfo): log.info(\"Closing Custom Counters Menu...\")]\n}]\n\n[h, if(vInfo): log.info(\"Mode after menu: \" + vMode)]\n[h, if(vMode == \"Clear Counters\"), code: {\n\t[if(json.type(vCounterToClear) == \"OBJECT\"), code: {\n\t\t\"<!-- Remove Specific Counter -->\"\n\t\t[abort(input(\"header | <html>Really remove this counter?<br>\" + \n\t\t\t\"<b style='color:red'>This cannot be undone!<\/b><pre>\" + \n\t\t\tjson.indent(vCounterToClear, 1) + \n\t\t\t\"<\/pre><\/html> | | LABEL | SPAN=TRUE\"))]\n\t\t[vCustomCounters = json.path.delete(vCustomCounters, \n\t\t\t\".[?(@.name == '\" + json.get(vCounterToClear, \"name\") + \"')]\")]\n\t};{\n\t\t[abort(input(\"header|<html>Clear ALL \" + token.name +\n\t\t\t\"'s custom counters?<br><b style='color:red'>This cannot be undone.<\/b>\" + \n\t\t\t\"<br>Defined Custom Counters:<br><pre style='width:200px'>\"+ \n\t\t\tjson.indent(json.path.read(vCustomCounters, \".name\"),2) + \n\t\t\t\"<\/pre>||LABEL|SPAN=TRUE\"))]\n\t\t[vCustomCounters = \"[]\"]\n\t}]\n\n\t[h: \"<!-- Use getProperty() for compatibility -->\"]\n\t[h: setProperty(vPropertyName, vCustomCounters)]\t\n\t[macro(vThisMacro): \"\"]\n};{}]\n\n[h, if(vMode == \"Adjust Counter\"), code: {\n\t<!-- Grab Counter Info -->\n\t<!-- Assumes vCounterName and vCounterAdjustment are set -->\t\n\t[vCounter = json.get(json.path.read(vCustomCounters, '.[?(@.name == \"' + vCounterName + '\")]'), 0)]\n\t[vCounterValue = json.get(vCounter, \"value\")]\n\t[vCounterMax = json.get(vCounter, \"max\")]\n\t[vNewCounterValue = vCounterValue + vCounterAdjustment]\n\n\t[if(vNewCounterValue < 0): vNewcounterValue = 0]\n\n\t[if(isNumber(vCounterMax)), code: {\n\t\t[if(vNewCounterValue > vCounterMax): vNewCounterValue = vCounterMax]\t\t\n\t};{}]\n\t\n\t<!-- Adjust the counter. -->\t\t\t\t\n\t[vCounterIndex = json.indexOf(vCustomCounters, vCounter)]\n\t[vUpdatedCounter = json.set(vCounter, \"value\", vNewCounterValue)]\n\t[vCustomCounters = json.set(vCustomCounters, vCounterIndex, vUpdatedCounter)]\t\n\n\t[h: \"<!-- Use getProperty() for compatibility -->\"]\n\t[h: setProperty(vPropertyName, vCustomCounters)]\t\n\t[macro(vThisMacro): \"\"]\n};{}]\n\n[h, if(vMode == \"Add New Counter\"), code: {\n\t[if(vInfo): log.debug(\"Setting default Category and Reset lists...\")]\n\t[if(vInfo): log.info(\"vCounterTypeList = \" + vCounterTypeList)]\n\t[vCounterTypes = json.toList(json.fields(vCounterTypeList))]\n\t[if(vInfo): log.info(\"vCounterTypes = \" + vCounterTypes)]\n\t\n\t[if(vInfo): log.info(\"Building Input...\")]\n\t[if(json.type(vCounterToEdit) == \"OBJECT\"), code: {\n\t\t[vNewEditVocab = \"Edit\"]\n\t\t[vCounterName = json.get(vCounterToEdit, \"name\")]\n\t\t[vCounterValue = json.get(vCounterToEdit, \"value\")]\n\t\t[vCounterCat = json.get(vCounterToEdit, \"category\")]\t\t\t\t\n\t\t[vCounterMax = json.get(vCounterToEdit, \"max\")]\n\t\t[if(!isNumber(vCounterMax)): vCounterMax = \"Auto\"]\n\t\t[vCounterTypeString = json.get(vCounterToEdit, \"reset\")]\n\t\t[if(json.get(vCounterTypeList, vCounterTypeEntry) == vCounterTypeString), \n\t\t\tforeach(vCounterTypeEntry, vCounterTypeList, \"\"): \n\t\t\t\tvCounterType = listFind(vCounterTypes, vCounterTypeEntry)]\n\t\t[if(vInfo): log.info(\"vCounterTypeString on edit token: \" + vCounterTypeString)]\t\n\t\t[if(vInfo): log.info(\"vCounterType on edit token: \" + vCounterType)]\t\t\t\t\n\t};{\n\t\t[vNewEditVocab = \"New\"]\n\t\t[vCounterName = \"Arrows\"]\n\t\t[vCounterCat = 0]\n\t\t[vCounterValue = 20]\n\t\t[vCounterType = 0]\n\t\t[vCounterMax = \"Auto\"]\n\t}]\n\n\t[vAddCounterHeader = \n\t\t\"<html><h2><span style='font-size:.9em;'>\" + vNewEditVocab + \" Counter for <\/span><br>\" +\n\t\ttoken.name + \"<\/h2>\" + vNumberOfCounters + \"<\/html>\"]\n\n\t[abort(input(\n\t\t\"header | \" +  vAddCounterHeader + \" |  | LABEL | SPAN=TRUE \",\n\t\t\"vCounterName | \" + vCounterName + \" | Counter Name | TEXT | width=8\",\n\t\t\"vCounterValue | \" + vCounterValue + \" | Counter Value | TEXT | WIDTH=4\",\t\t\t\t\n\t\t\"vCounterCat | \" + vCounterCategories +\n\t\t\t\" | Counter Category | LIST | VALUE=STRING SELECT=\" + listFind(vCounterCategories, vCounterCat),\n\t\t\"vCounterType | \" + vCounterTypes +\n\t\t\t\" | Counter Type | RADIO | SPAN=TRUE VALUE=STRING SELECT=\" + vCounterType,\n\t\t\"vCounterMax | \" + vCounterMax + \" | Counter Max | TEXT | WIDTH=4\"))]\t\n\n\t[vNewCounter = json.set(\"{}\",\n\t\t\"name\", vCounterName,\n\t\t\"category\", vCounterCat,\n\t\t\"value\", vCounterValue)]\n\n\t[if(vInfo): log.info(\"vCounterType(key) = \" + vCounterType)]\n\t[vCounterType = json.get(vCounterTypeList, vCounterType)]\n\t\n\t[if(vInfo): log.info(\"vCounterType(value) = \" + if(vCounterType == \"\", \"none\", vCounterType))]\n\t[if(vCounterType != \"\"):\n\t\tvNewCounter = json.set(vNewCounter, \n\t\t\t\"max\", if(isNumber(vCounterMax), vCounterMax, vCounterValue),\n\t\t\t\"reset\", vCounterType)]\n\t\t\t\n\t[if(vInfo): log.info(\"Existing counters: \" + string(json.path.read(vCustomCounters, \".name\")))]\n\t[if(vInfo): log.info(\"Token to edit: \" + json.type(vCounterToEdit))]\n\t[vExistingCounters = json.path.read(vCustomCounters, \".name\")]\t\n\t[vEditMode = if(json.type(vCounterToEdit) == \"OBJECT\", 1, 0)]\n\t[if(vEditMode): vEditNameChanged = if(vCounterName != json.get(vCounterToEdit, \"name\"), 1, 0); vEditNameChanged = 0]\n\t[vHasDuplicate = json.contains(vExistingCounters, vCounterName)]\n\t[if(vHasDuplicate || vEditMode), code: {\n\t\t[if(vInfo): log.info(\"Found a \" +\n\t\t\tif(vHasDuplicate, \"duplicate\", \"\") + \n\t\t\tif(vHasDuplicate && vEditMode, \" and \", \"\") + \n\t\t\tif(vEditMode, \"a counter to edit.\", \".\"))]\n\t\t[vUpdateMsg = \"<html><b>\" + vNewEditVocab + \" Counter Confirmation<\/b>\"]\n\t\t[if(vEditMode): \n\t\t\tvUpdateMsg = vUpdateMsg + \"<br>You can review your changes below.\"]\n\t\t[if(vHasDuplicate && (vEditNameChanged || !vEditMode)): \n\t\t\tvUpdateMsg = vUpdateMsg + \"<br>\" + token.name + \" already has a counter named '\" + vCounterName + \"' which will be overwritten.\"]\n\t\t[vUpdateMsg = vUpdateMsg + \"<\/html>\"]\n\t\t[vEditMsg = \"\"]\n\t\t[if(vEditMode && vEditNameChanged):\n\t\t\tvEditMsg = vEditMsg + \"## header | \" + \n\t\t\t\"You are creating a copy of your counter, \" + \n\t\t\tif(vHasDuplicate, \"overwiting a different counter.\", \"leaving the original as-is.\") + \" | | LABEL | SPAN=TRUE\"]\n\t\t[if(vHasDuplicate && (!vEditMode || vEditNameChanged)): \n\t\t\tvOrigCounter = json.get(json.path.read(vCustomCounters, \".[?(@.name == '\" + vCounterName + \"')]\"), 0);\n\t\t\tvOrigCounter = vCounterToEdit]\n\t\t[vEditMsg = vEditMsg + \" ## header | \" + \n\t\t\t\"<html><table><tr>\" + \n\t\t\tif(vHasDuplicate, \n\t\t\t\t\"<td>Original:<br>\" + \n\t\t\t\tformatStrProp(json.toStrProp(vOrigCounter), \"<table margin=0 cellpadding=0 cellspacing=6>%list<\/table>\", \n\t\t\t\t\t\"<tr><td><b>%key:<\/b><\/td><td>%value<\/td> <\/tr>\", \"\") + \"<\/pre><\/td>\", \"\") + \n\t\t\t\t\"<td>Updated:<br>\" + \n\t\t\t\tformatStrProp(json.toStrProp(vNewCounter), \"<table margin=0 cellpadding=0 cellspacing=6>%list<\/table>\", \n\t\t\t\t\t\"<tr><td><b>%key:<\/b><\/td><td>%value<\/td> <\/tr>\", \"\") + \n\t\t\t\t\"<\/html> | | LABEL | SPAN=TRUE\"]\n\t\t[abort(input(\"header | \" + vUpdateMsg + \" | | LABEL | SPAN=TRUE\" + vEditMsg))]\t\t\t\n\t\t[vCustomCounters = json.path.delete(vCustomCounters, \n\t\t\t\".[?(@.name == '\" + vCounterName + \"')]\")]\n\t};{}]\n\t\n\t[vCustomCounters = json.append(vCustomCounters, vNewCounter)]\n\t[h: \"<!-- Use getProperty() for compatibility -->\"]\n\t[h: setProperty(vPropertyName, vCustomCounters)]\t\n\t[macro(vThisMacro): \"\"]\n};{}]\n\n[h, if(vInfo): log.info(\"Done!\")]",
        "maxWidth": "",
        "tooltip": "<html><body style=\"width:200px\">\nAdd, Edit, and Remove custom counters on a token.\n<hr>\nConfigure this macro to fit your game, then place on the Campaign or GM panel. You can also place onto tokens or call from another token macro using the [macro():] roll option.\n<\/body><\/html>",
        "applyToSelected": true,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "a0e14092-f8d9-47ac-9c31-36048cf2c386",
          "commandChecksum": "fef7ab970c1b4ecf703cc2718f2a55c5",
          "propsChecksum": "cda1d8e1de1c07c7cf9d7fd5edf2ed03"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "default",
        "group": "2. Template Adjustment Macro",
        "includeLabel": false,
        "sortBy": "",
        "index": 3,
        "label": "Adjust Counter",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h, code: { \"\n<!--Call this macro from any other macro to increment a custom counter. \n\tExpects two arguments: \n\n\tCounterName - the exact name of the counter.\n\tCounterCost - The counter cost. A negative value will instead ADD to the counter.\n\t-->\" }]\n\n[h: \"<!-- Set Countername and Cost. Negative costs ADD to the counter. -->\"]\n[h: vCounterName = \"\"]\n[h: vCounterCost = 0]\n\n[h: \"<!-- get JSON arguments as variables and quit if no counter name is set. -->\"]\n[h: json.toVars(macro.args, \"v\")]\n[h: assert(if(vCounterName == \"\", 0, 1), \"No CounterName set.\", 0)]\n\n[h: \"<!-- Counter Options -->\"]\n[h: \"<!-- Set vCustomCounterMacro to and empty string/blank if you don't want to refresh the frame. -->\"]\n[h: vCustomCounterMacro = \"Custom Counters@Lib:CustomCounters\"]\n[h: vPropertyName = \"CustomCounters\"]\n\n[h: \"<!-- Grab Counter Info -->\"]\n[h: vCustomCounters = getProperty(vPropertyName)]\n[h: vCounter = json.get(json.path.read(vCustomCounters, '.[?(@.name == \"' + vCounterName + '\")]'), 0)]\n[h: vCounterIndex = json.indexOf(vCustomCounters, vCounter)]\n[h: vCounterValue = json.get(vCounter, \"value\")]\n[h: vCounterMax = json.get(vCounter, \"max\")]\n[h: vNewCounterValue = vCounterValue - vCounterCost]\t\n\n[h: vMsg = \"\"]\n[h, if(vNewCounterValue < 0), code: {\n\t<!-- Add/edit code here that triggers when the token does not have enough of the counter available. -->\n\t[h, if(vCounterMax != \"\"): vCounterMax = \"/\" + vCounterMax]\n\t[vMsg = token.name + \" can't \" + if(vCounterCost > 0, \"spend\", \"gain\") + \" \" + floor(math.abs(vCounterCost)) + \n\t\t\t\" <b>\" + vCounterName + \"<\/b> (\" + vCounterValue + vCounterMax + \").\"]\n};{\t\n\t<!-- Check for the maximum value. -->\n\t[if(isNumber(vCounterMax)), code: {\t\n\t\t[if(vNewCounterValue > vCounterMax): vNewCounterValue = vCounterMax]\n\t\t[vCounterMax = \"/\" + vCounterMax]\t\n\t};{}]\n\t\n\t<!-- Alter the counter and reload the Custom Counters frame if present. -->\t\t\n\t[vCounter = json.set(vCounter, \"value\", vNewCounterValue)]\n\t[vCustomCounters = json.set(vCustomCounters, vCounterIndex, vCounter)]\n\t[setProperty(vPropertyName, vCustomCounters)]\n\t[if(vCustomCounterMacro != \"\" && isFrameVisible(\"Custom Counters\")), code: { [macro(vCustomCounterMacro):\"\"] };{}]\n\n\t<!-- Add/edit additional code here when the token successfully adjusts this counter. -->\n\t[if(vCounterValue != vNewCounterValue) :\n\t\tvMsg = token.name + \" adjusted counter <b>\" + vCounterName + \n\t\t\t\"<\/b> from \" + vCounterValue + \" to <b>\" + vNewCounterValue + vCounterMax + \"<\/b>.\";\n\t\tvMsg = token.name + \" can't \" + if(vCounterCost > 0, \"spend\", \"gain\") + \" \" + floor(math.abs(vCounterCost)) + \n\t\t\t\" <b>\" + vCounterName + \"<\/b> (\" + vCounterValue + vCounterMax + \").\"]\n}]\n\n[h, if(vMsg != \"\"): broadcast(vMsg)]",
        "maxWidth": "",
        "tooltip": "<html><body style=\"width:200px\">\nAdjusts a counter by a given cost.\n<hr>\nMeant to be copied and edited, or called from other macros with a JSON object with the values 'CounterName' and 'CounterCost'. Note that a negative cost will ADD to the counter up to the counter's maximum (if any).\n<\/html>",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "f81d5412-3aae-400c-8a0d-670709534946",
          "commandChecksum": "b6cbb62609dfb54fe54028f9ac516084",
          "propsChecksum": "f2440073d2ee82dcba38bfe6622e1038"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "3. Examples",
        "includeLabel": false,
        "sortBy": "",
        "index": 5,
        "label": "Shoot Arrow",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[macro(\"Adjust Counter@Lib:CustomCounters\"): json.set(\"{}\",\n\t\"CounterName\", \"Arrows\",\n\t\"CounterCost\", 1)]",
        "maxWidth": "",
        "tooltip": "Reduces the 'Arrows' counter on token this macro is on by 1.",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "ff2ed324-1fb6-474a-83ea-a1fc77f063d6",
          "commandChecksum": "fe39bed6a1fc3ec931062457cd239dfb",
          "propsChecksum": "0c693758663889700084be03c7de3287"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "3. Examples",
        "includeLabel": false,
        "sortBy": "",
        "index": 7,
        "label": "Find Arrow",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[macro(\"Adjust Counter@Lib:CustomCounters\"): json.set(\"{}\",\n\t\"CounterName\", \"Arrows\",\n\t\"CounterCost\", -1)]",
        "maxWidth": "",
        "tooltip": "Adds to the 'Arrows' counter on token this macro is on by 1.",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "cdca370e-f5c8-45b4-90e2-0806d531e4fb",
          "commandChecksum": "6c40df9b788cdea188f18ba450a7f8f4",
          "propsChecksum": "0d154fb4f270d4f50b853da8755c1685"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "3. Examples",
        "includeLabel": false,
        "sortBy": "",
        "index": 8,
        "label": "Show Counters",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[macro(\"Custom Counters@Lib:CustomCounters\"): \"\"]",
        "maxWidth": "",
        "tooltip": "<html><body style=\"width:200px\">\nAdd, Edit, and Remove custom counters on a token.\n<hr>\nThis is a reference to the Custom Counters macro on a library token. Drag it onto any macro panel for quick access.\n<\/body><\/html>",
        "applyToSelected": true,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "64d57a6a-acdc-48b4-a7e8-8d54e457dacb",
          "commandChecksum": "c21c563ddaec6c807951341f744e85e2",
          "propsChecksum": "260fffee7b504c8302861eef36926505"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "default",
        "group": "2. Template Adjustment Macro",
        "includeLabel": false,
        "sortBy": "",
        "index": 9,
        "label": "exportLibJSON",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": true,
        "command": "[h, code: {\n\t[h: vPropsJSON = \"{}\"]\n\t[h, foreach(vProp, getPropertyNamesRaw(), \"\"): \n\tvPropsJSON = json.set(vPropsJSON, vProp, getRawProperty(vProp))]\n\n\t[h: vMacrosJSON = \"\"]\n\t[h, foreach(vLabel, getMacros(\"json\"), \"\"), code: {\n    [foreach(vIndex, getMacroIndexes(vLabel), \"\"):\n\t  \tvMacrosJSON = json.append(vMacrosJSON, getMacroProps(vIndex, \"json\"))]\n\t}]\n\t\n\t[h: vISOTime     = json.get(getInfo(\"Client\"), \"isoTimeDate\")]\n\t[h: vTimeVersion = \"0.0.\" + listget(replace(vISOTime, \"[- :T]\", \"\"), 0, \".\")]\n\t\n\t[h: vLibVersion = getLibProperty(\"libVersion\")]\n\t[h, if(vLibversion == \"\"):\n\t\tvLibVersion = vTimeVersion]\n\t[h: vJSON = json.set(\"{}\", getName(), json.set(\"{}\", vLibVersion,\n\t\tjson.set(\"{}\",\n\t\t\"mtversion\" , json.get(getInfo(\"client\"), \"version\"),\n\t\t\"notes\"\t\t, getNotes(),\n\t\t\"gmnotes\"\t, getGMNotes(),\n\t\t\"properties\", vPropsJSON,\n\t\t\"macros\"\t, vMacrosJSON)))]\n}]\n\n[frame5(\"JSON Output\", \"width=640;height=480;temporary=1;\"): {\n<html>\n<body style=\"margin:0;padding:0;\">\n<textarea style=\"height:100%; width:100%;\" readonly>\n[r: json.indent(vJSON, 2)]\n<\/textarea>\n<\/body>\n<\/html>\n}]\n",
        "maxWidth": "",
        "tooltip": "Displays Name/GM Name/Label, Notes, Properties, and Macros to a single JSON.",
        "applyToSelected": true,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "9b0c4a9d-5103-4fe0-9b81-e6365fabbe46",
          "commandChecksum": "3cd37dd3ec9984cfe9deb250cf428ca7",
          "propsChecksum": "56ac7496a4059ff33caae28db652791d"
        }
      }
    ]
  }},
  "Lib:Overlay": {"0.1-alpha2":   {
    "mtversion": "1.8.4",
    "timestamp": "2021-04-04T20:31:40.8335514-07:00",
    "notes": "",
    "gmnotes": "",
    "properties":     {
      "AC": "",
      "Charisma": "",
      "Constitution": "",
      "Defense": "",
      "Description": "",
      "Dexterity": "",
      "Elevation": "",
      "HP": "",
      "Intelligence": "",
      "MaxHP": "",
      "Movement": "",
      "Strength": "",
      "Wisdom": "",
      "door_i18n": "",
      "door_language": "",
      "libAuthor": "Melek (Lionel Di Giacomo)",
      "libVersion": "0.1-alpha2"
    },
    "macros":     [
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2.2 Template Parts - CSS",
        "includeLabel": false,
        "sortBy": "",
        "index": 1,
        "label": "GMOverlayCSS",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "* {\n\tbox-sizing: border-box;\n}\n\nbody {\n\tfont-size: 16px;\n\tpadding: 0.5rem;\n\tcolor:white;\n}\n\ndiv {\n\tpadding: 0;\n\tmargin: 0;\n}\n\n.hidden {\n\tdisplay: none;\n}\n\n:not(.multiple-selected) .hide-for-single {\n\tdisplay: none;\n}\n\n.multiple-selected .hide-for-multiple {\n\tdisplay: none;\t\n}\n\n.selected-token {\n\tdisplay:flex;\n\talign-items: middle;\t\n\tcolor:white;\n}\n\n.selected-token__image {\n\tmargin-right: 0.75rem;\n\tmargin-top: 0.75rem;\n}\n\n.selected-token__content {\n\twidth: 200px;\n}\n\n.multiple-selected .selected-token__content h2 {\n\t\n}\n\nh1.selected-header,\n.selected-token__content h1 {\n\tfont-family: 'Times', 'Helvetica', serif;\n\tfont-size: 1rem;\n\ttext-transform: uppercase;\n\tmargin: 0;\n\ttext-shadow: 1px 1px 0 black, -1px 1px 0 black, 1px -1px 0 black, -1px -1px 0 black;\t\n}\n\n.selected-token__content h2 {\n\tfont-family: 'Times', 'Helvetica', serif;\n\tfont-size: 3rem;\n\tmargin: 0;\n\tcolor: white;\n\twhite-space: nowrap;\n\ttext-shadow: 2px 2px 0 black, -2px 2px 0 black, 2px -2px 0 black, -2px -2px 0 black;\n}\n\n.multiple-selected .selected-token__content h2 {\n\tfont-size: 1.5rem;\n}\n\n.selected-token__content__hp {\n\tposition:relative;\n\tbackground-color: rgba( 0, 0, 0, 0.5);\n\tborder: 2px solid black\n}\n\n.selected-token__content__hp__bar {\n\theight:1.5rem;\n\tbackground-color: green;\n}\n\n.selected-token__content__hp__value {\n\tposition: absolute; \n\ttop: 0;\n\tpadding: 0.25rem 0 0 0.25rem;\n\tcolor: white;\t\n}",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "58bbcc6e-3c6e-4655-ac6e-46f2c406684b",
          "commandChecksum": "53c7763f7ef887b438daa005a3d54e0c",
          "propsChecksum": "e89b5f28622e0c2c2e8e4a62a79a7620"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1. Overlay Macros",
        "includeLabel": false,
        "sortBy": "",
        "index": 2,
        "label": "GM Overlay",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h, code: {\"\n\t<!-- Configure these property names for your games HP and Max HP properties. \n\tIf these are not defined in your 'Basic' properties (or in the properties of\n\tany tokens you select), the overlay will not work.\n\n\tThe vDisplayBarName should be configured to display to 'GM Only', or players \n\twill see the bars. You can make a new bar that is GM only and specify it here. \t-->\"}]\n[h: vBarValueProp = \"HP\"]\n[h: vBarMaxProp = \"MaxHP\"]\n[h: vHideImageThreshold = 10]\n[h: \"<!-- This bar should be configured to display to 'GM Only', or players will see the bars. -->\"]\n[h: vDisplayBarName = \"Health\"]\n\n[h: vSelected = getSelected()]\n[h: vSelectedCount = listCount(vSelected)]\n[h, foreach(vToken, getTokens(), \"\"), if(listContains(vSelected, vToken) > 0), code: {\n\t[h: vBarValue = getProperty(vBarValueProp, vToken)]\n\t[h: vBarMax = getProperty(vBarMaxProp, vToken)]\t\t\n\t[setBar(vDisplayBarName, vBarValue/vBarMax, vToken)]\n};{\t\n\t[setBarVisible(vDisplayBarName, 0, vToken)]\n}]\n[overlay(getMacroName()): {\n<html><head>\n<link rel=\"onChangeSelection\" type=\"macro\" href=\"[r: macroLinkText(getMacroName() + \"@\" + getMacroLocation())]\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"GMOverlayCSS@[r: getMacroLocation()]\">\n<\/head><body class=\"[r, if(vSelectedCount > 1): \"multiple-selected\"]\">\n[r, if(vSelectedCount > 1): \"<h1 class='selected-header'>\" + vSelectedCount + \" Selected<\/h1>\"]\t\n[r, foreach(vSelected, getSelected(), \"\"), code: {\n\t[h: vBarValue = getProperty(vBarValueProp, vSelected)]\n\t[h: vBarMax = getProperty(vBarMaxProp, vSelected)]\t\n\t<div class=\"selected-token\">\t\t\n\t\t<div class=\"selected-token__image [r, if(vSelectedCount > vHideImageThreshold): \"hidden\"]\">\n\t\t\t<img src=\"[r: getTokenImage(if(vSelectedCount == 1, 100, 60), vSelected)]\">\n\t\t<\/div>\n\t\t<div class=\"selected-token__content\">\n\t\t\t[r, if(vSelectedCount == 1): \"<h1>Selected<\/h1>\"]\t\n\t\t\t<h2>[r: getName(vSelected)]<\/h2>\n\t\t\t<div class=\"selected-token__content__hp\">\n\t\t\t\t<div class=\"selected-token__content__hp__bar\" \n\t\t\t\t\tstyle=\"width:[r: number(vBarValue)/vBarMax * 100]%;\n\t\t\t\t\t[h: vBarRatio = vBarValue / vBarMax]\n\t\t\t\t\t[h: vH = floor(vBarRatio * 120)]\n\t\t\t\t\t[h: vS = 75]\n\t\t\t\t\t[h: vL = 30]\n\t\t\t\t\t[h: vHSL = \"hsl(\" + vH + \", \" + vS + \"%, \" + vL + \"%)\"]\n\t\t\t\t\tbackground-color: [r: vHSL];\">\n\t\t\t\t<\/div>\n\t\t\t\t<div class=\"selected-token__content__hp__value\">\n\t\t\t\t\t[r: vBarValue + \" / \" + vBarMax]\n\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t<\/div>\n\t<\/div>\n}]\n<\/body><\/html>\n}]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "5d250b9a-9c5f-47e5-bb78-751cc26b65da",
          "commandChecksum": "96c649be168344db0ce230bc9ebf087f",
          "propsChecksum": "49f5dec6002ab44d8ca9004258e5b29b"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2.2 Template Parts - CSS",
        "includeLabel": false,
        "sortBy": "",
        "index": 3,
        "label": "OverlayPositionCSS",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "/* All divs are assumed to be overlays. */\n.overlay {\n  position: fixed;\n  box-sizing: border-box;\n  margin: 0;\n}\n\n.overlay__flex-content {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\n\n.overlay__child {\n  display: block;  \n}\n\n.top {\n  top: 0;\n}\n\n.bottom {\n  bottom: 0;\n}\n\n.left {\n  left: 0;\n}\n\n.right {\n  right: 0;\n}\n\n.center {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.middle {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n.middle.center {\n  transform: translate(-50%, -50%);\n}\n\n/* All overlays would be assigned an ID. \n Here is an example of an overlay offset applied with a wrapper div and explicit offset class. */\n#OVERLAY-001 .overlay__content.offset {\n  position: relative;\n  top: 16px;\n  left: 16px;\n}\n\n/* all styles for an overlay would be prefixed with an ID and a wrapper element to scope targeting */\n#OVERLAY-002.options {  \n  max-width: 75%;\n  margin: 0 auto;\n}\n\n#OVERLAY-002 .overlay__content img {\n  display: block;\n  width: 100%;\n}\n\n#OVERLAY-003.options {\n  color: white;\n  margin-right: 1rem;\n}\n\n#OVERLAY-003 .overlay__child:not(.overlay__content) {\n  color: lightblue;\n  padding: 0.5rem;\n  margin-bottom: 0.25rem;\n  font-size: 16px;\n  border: 1px solid rgba(255, 255, 255, 0.5);\n}\n\n/* Example of a responsive overlay rule */\n@media screen and (max-width: 600px) {\n  #OVERLAY-002.options {\n    width: 100%;\n    max-width: unset;\n  }\n}\n\n/* Utility styles for this demonstration */\nbody {\n  background-size: cover;\n  color: white;\n  font-size: 20px;\n  font-weight: bold;\n  font-family: Helvetica, Calibri, Roboto, Arial, sans-serif;\n}\n\n.example {\n  height: 100px;\n  width: 150px;\n  background: rgba(128, 128, 255, 0.25);\n  border: 10px solid rgba(255, 128, 128, 0.5);\n  padding: 1rem;\n  text-align: center;\n}\n\n.hidden {\n  display: none;\n}",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "378d5b03-f26a-4f41-8659-536591016462",
          "commandChecksum": "c3af15abdf5d53c18f547a0e6730e6fd",
          "propsChecksum": "7bc860df03482c023b193592f25d8270"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2.3 Template Parts - JavaScript",
        "includeLabel": false,
        "sortBy": "",
        "index": 4,
        "label": "SampleOverlayJS",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "<script>\nfunction toggleOverlay(cssQuery) {\n\tvar toggles = document.querySelectorAll(cssQuery);\n  for (let i = 0; i < toggles.length; i++) {\n  \ttoggles[i].classList.toggle('hidden');\n  }  \n}\n\nfunction addWidget() {\n\tlet newDiv = document.getElementById(\"OVERLAY-004\").cloneNode(true);\n  let widgets = document.querySelector(\".overlay__flex-content\");\n  widgets.appendChild(newDiv);\n}\n\nfunction removeWidget(minChildren) {\n  minChildren = typeof minChildren !== 'undefined' ? minChildren : 2;\n\tlet widgets = document.querySelector(\".overlay__flex-content\");\n  if(widgets.children.length > minChildren) {\n  \twidgets.removeChild(widgets.lastChild);\n  }\n}\n\ntoggleOverlay(\".example:not([data-stickaround])\");\nremoveWidget();\n<\/script>",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "f976835e-5286-4562-a7f4-f3421d2b4229",
          "commandChecksum": "f13cfad3f3f40f03cbc3503652ead6ad",
          "propsChecksum": "d9d5cdc0c2d27c393e1bca04d7138896"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1. Overlay Macros",
        "includeLabel": false,
        "sortBy": "",
        "index": 5,
        "label": "Sample Overlay System",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[overlay(getMacroName()): {\n<html>\n<head>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"OverlayPositionCSS@[r: getMacroLocation()]\">\n<\/head>\n<body>\n\t[r: getMacroCommand(number(getMacroIndexes(\"SampleOverlayHTML\")))]\n\t[r: getMacroCommand(number(getMacroIndexes(\"SampleOverlayJS\")))]\t\n<\/body>\n<\/html>\n}]",
        "maxWidth": "",
        "tooltip": "<html><body style=\"width:200px;\">A sample overlay system which uses CSS to target overlays in one of 9 positions across the map view corners, sides, and center.<\/body><\/html>",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "e696487f-2357-4b06-aafa-2a061fec6cb0",
          "commandChecksum": "7bdf9d8e27c35c9fc5593ca6a2a4135e",
          "propsChecksum": "58c62a0208e4ac8102839dbd7f03a27a"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2.1 Template Parts - HTML",
        "includeLabel": false,
        "sortBy": "",
        "index": 6,
        "label": "SampleOverlayHTML",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "  <div class=\"overlay example top left\">Top Left<\/div>\n  <div class=\"overlay example top center\">Top Center<\/div>\n  <div class=\"overlay example top right\">Top Right<\/div>\n  <div class=\"overlay example middle left\">Left Middle<\/div>\n  <div class=\"overlay example middle center\" style=\"height:unset; width:unset;\" data-stickaround>\n    Middle Center<br>\n    <button onclick=\"toggleOverlay('div[data-toggle]')\">Toggle Overlay<\/button>\n    <button onclick=\"toggleOverlay('.example:not([data-stickaround])')\">Toggle Positions<\/button><br>\n    <button onclick=\"addWidget()\">Add Overlay<\/button>\n    <button onclick=\"removeWidget()\">Remove Overlay<\/button>  \n  <\/div>\n  <div class=\"overlay example middle right\">Right Middle<\/div>\n  <div class=\"overlay example bottom left\">Bottom Left<\/div>\n  <div class=\"overlay example bottom center\">Bottom Center<\/div>\n  <div class=\"overlay example bottom right\">Bottom Right<\/div>\n\n  <!-- additional overlays -->\n  <div class=\"overlay top left\" id=\"OVERLAY-001\" data-toggle>\n    <div class=\"overlay__content offset\">\n      <img src=\"asset://078341459fcd959099d040db36cb97c9\">\n    <\/div>\n  <\/div>\n  <div class=\"overlay bottom center options\" id=\"OVERLAY-002\" data-toggle>\n    <div class=\"overlay__content\">\n     <img src=\"asset://a9d3e3debc0ef4685a4e62f77a8a097a\">\n    <\/div>  \n  <\/div>\n  <div class=\"overlay right middle options\" id=\"OVERLAY-003\" data-toggle>\n    <div class=\"overlay__flex-content\">\n      <div class=\"overlay__child overlay__content\">\n        <!-- This is OVERLAY-003's content as the first flex-box. -->\n        Widgets!\n      <\/div>    \n      <div class=\"overlay__child\" id=\"OVERLAY-004\">\n        <div class=\"overlay__content\">\n          Widget\n        <\/div>\n      <\/div>   \n      <div class=\"overlay__child\" id=\"OVERLAY-005\">\n        <div class=\"overlay__content\">\n          Widget\n        <\/div>\n      <\/div>       \n    <\/div>\n  <\/div>\n  <script>\n  function toggleOverlay(cssQuery) {\n\t\tvar toggles = document.querySelectorAll(cssQuery);\n\t  for (let i = 0; i < toggles.length; i++) {\n\t  \ttoggles[i].classList.toggle('hidden');\n\t  }  \n\t}\n\t\n\tfunction addWidget() {\n\t\tlet newDiv = document.getElementById(\"OVERLAY-004\").cloneNode(true);\n\t  let widgets = document.querySelector(\".overlay__flex-content\");\n\t  widgets.appendChild(newDiv);\n\t}\n\t\n\tfunction removeWidget(minChildren) {\n\t  minChildren = typeof minChildren !== 'undefined' ? minChildren : 2;\n\t\tlet widgets = document.querySelector(\".overlay__flex-content\");\n\t  if(widgets.children.length > minChildren) {\n\t  \twidgets.removeChild(widgets.lastChild);\n\t  }\n\t}\n\t\n\ttoggleOverlay(\".example:not([data-stickaround])\");\n\tremoveWidget();\n\t<\/script>",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "74c7c7df-1cd0-4a78-964a-600b4a00e09b",
          "commandChecksum": "2570891c5569250811cff071c7d08a5e",
          "propsChecksum": "be05d2e191b2ddd04610e32082fbb920"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "",
        "includeLabel": false,
        "sortBy": "",
        "index": 7,
        "label": "Toggle GM Overlay",
        "fontSize": "1.10em",
        "minWidth": "180px",
        "playerEditable": false,
        "command": "[macro(\"Overlay Toggler@\" + getMacroLocation()): \"GM Overlay\"]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "7b097005-72b2-4e7d-984e-4d5860228275",
          "commandChecksum": "11854e14787d3a086553af1136db3d7f",
          "propsChecksum": "933ac0b7d5f1476d4be5fcdd5d8311e5"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "",
        "includeLabel": false,
        "sortBy": "",
        "index": 8,
        "label": "Toggle Kitchen Sink",
        "fontSize": "1.10em",
        "minWidth": "180px",
        "playerEditable": false,
        "command": "[macro(\"Overlay Toggler@\" + getMacroLocation()): \"Sample Overlay System\"]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "0e9b23d1-456f-443d-9e6c-3872f59407f5",
          "commandChecksum": "aa4726d2e91bcb17b605f34dd2a68075",
          "propsChecksum": "75ac1e624e5d17ae6301ba65df0bd442"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "",
        "includeLabel": false,
        "sortBy": "",
        "index": 9,
        "label": "Toggle Door Watcher",
        "fontSize": "1.10em",
        "minWidth": "180px",
        "playerEditable": false,
        "command": "[macro(\"Overlay Toggler@\" + getMacroLocation()): \"Door Watcher\"]",
        "maxWidth": "",
        "tooltip": "A macro which toggles 'Smart Doors' when",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "0ac7fd2b-d6d8-4348-ab75-04fb5127cbe8",
          "commandChecksum": "e6340930ba03512f6d02321e23e8276d",
          "propsChecksum": "c46c4d93ad5e9eb86566d1d162d795df"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "3. Utility",
        "includeLabel": false,
        "sortBy": "",
        "index": 10,
        "label": "Overlay Toggler",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h, if(!isOverlayRegistered(macro.args)), code: {\n\t[macro(macro.args + \"@\" + getMacroLocation()): \"\"]\n};{\n\t[closeOverlay(macro.args)]\n}]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "1325b453-b725-4a3a-83a7-787bd74f4a57",
          "commandChecksum": "0d5c230b449a9db27334c31c6b785ce1",
          "propsChecksum": "79888c206f97b94b86f7d74a06850c11"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1. Overlay Macros",
        "includeLabel": false,
        "sortBy": "",
        "index": 11,
        "label": "Door Watcher",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[r: vSelected = getSelected()]\n[h, if(listCount(vSelected) == 1), code: {\n\t[vIsSmartDoor = getProperty(\"door_smart\", vSelected)]\n\t[vIsSmartDoor = if(vIsSmartDoor == \"\", 0, vIsSmartDoor)]\n\t[if(vIsSmartDoor), code: {\t\n\t\t[macro(\"toggle.open@this\"): \"\"]\n\t};{}]\n};{}]\n\n[overlay(getMacroName()): {\n<html>\n<head>\n\t<link rel=\"onChangeSelection\" type=\"macro\" href=\"[r: macroLinkText(getMacroName() + \"@\" + getMacroLocation())]\">\n<\/head>\n<body style=\"margin: 0; padding: 0; font-size:12px; color: white;\">\n\t<div style=\"position:fixed; margin:0; padding: 0.25rem; bottom:0; left: 0; background-color:rgba(0,0,0,.5);\">\n\t\tDOOR WATCHER ON\n\t<\/div>\n<\/body>\n<\/html>\n}]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "d3c6bbea-1eb3-4d72-8a15-efe46e47cf31",
          "commandChecksum": "79e261f6a9651b62c87d2133f34ae99d",
          "propsChecksum": "c43f098b44414cfe1533c9f1427c1c79"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "default",
        "group": "3. Utility",
        "includeLabel": false,
        "sortBy": "",
        "index": 12,
        "label": "toggle.open",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: vSelected = getSelected()]\n[h: switchToken(vSelected)]\n[h, if(indexOf(macro.args, 'override')>-1): override=1; override=0]\n[h, if(indexOf(macro.args, 'peek')>-1): peeking=1; peeking=0]\n\n[h: door.i18n=getProperty('door_i18n')][h: door.language=getProperty('door_language')]\n[h: i18n_1=json.path.read(door.i18n, strformat('[\"%{door.language}\"][\"message_05\"]'))]\n[h: i18n_2=json.path.read(door.i18n, strformat('[\"%{door.language}\"][\"message_06\"]'))]\n\n[h: isOpen=getProperty('door_open')]\n[h: isOpen=if(isOpen=='', if(json.equals(getTokenVBL(), getProperty('door_open_vbl')), 1, 0), isOpen)]\n[h: isSwing=if(number(getProperty('door_type'))==0, 1, 0)]\n[h, if(isSwing==''), code:{\n\t[isSwing=!json.isEmpty(getMacroIndexes('Swing Door', 'json'))]\n\t[setProperty('door_type', isSwing)]};{}]\n[h: isLocked=getProperty('door_locked')]\n[h, if(isLocked==''), code:{\n\t[isLocked=!json.isEmpty(getMacroIndexes('Locked', 'json'));'']\n\t[setProperty('door_locked', isLocked)]};{}]\n[h: isDouble=if(getProperty('door_paired_id')!='', 1, 0)]\n[h, if(getTokenFacing()==''): setTokenFacing(-90); '']\n\n[h, if(isLocked), code:{\n\t[if(!override && !peeking), code:{\n\t\t[broadcast(i18n_1)]\n\t\t[abort(0)]\n\t};{}]\n};{}]\n[h: isPeek=number(getProperty('door_peek'))]\n[h, if(peeking), code:{\n\t[isPeekingAllowed=number(getProperty('door_peek_allow'))]\n\t[if(!isPeekingAllowed && !isOpen), code:{\n\t\t[broadcast(i18n_2)]\n\t\t[abort(0)]\n\t};{}]\n\t[if(isPeekingAllowed && !isOpen), code:{\n\t\t[setTokenVBL(if(isPeek, getProperty('door_closed_VBL'), getProperty('door_peek_VBL')))]\n\t\t[setProperty('door_peek', !isPeek)]\n\t\t[abort(0)]\n\t};{}]\n\t[abort(0)]\n};{\n\t[if(isPeek): setTokenVBL(if(isOpen, getProperty('door_open_VBL'), getProperty('door_closed_VBL')))]\n}]\n\n[h, if(isSwing), code:{\n\t[doorSwingArc=if(isNumber(getLabel()), getLabel(), getProperty('door_arc'))]\n\t[startFacing=getTokenFacing()]\n\t[direction=if(isOpen, -1, 1)]\n\t[facingChange=direction*doorSwingArc]\n\t[setTokenFacing(startFacing+facingChange)]\n};{\n\t[if(isOpen), code:{\n\t\t[setTokenImage(getTokenHandout())]\n\t\t[setTokenVBL(getProperty('door_closed_VBL'))]\n\t};{\n\t\t[setTokenImage(getTokenPortrait())]\n\t\t[setTokenVBL(getProperty('door_open_VBL'))]\n\t}]\n}]\n[h: setProperty(\"door_open\", !isOpen)]\n\n[h: '<!-- action second door if paired -->']\n[h: pairedId=getProperty('door_paired_id')]\n[h, if(pairedId==\"\"), code:{\n\t[exposePCOnlyArea()]\n\t[abort(0)]\n};{\n\t[switchToken(pairedId)]\n}]\n\n[h: isSwing=if(number(getProperty('door_type'))==0, 1, 0)]\n[h, if(isSwing), code:{\n\t[doorSwingArc=if(isNumber(getLabel()), getLabel(), getProperty('door_arc'))]\n\t[startFacing=getTokenFacing()]\n\t[direction=if(isOpen, -1, 1)]\n\t[facingChange=direction*doorSwingArc]\n\t[setTokenFacing(startFacing+facingChange)]\n};{\n\t[if(isOpen), code:{\n\t\t[setTokenImage(getTokenHandout())]\n\t\t[setTokenVBL(getProperty('door_closed_VBL'))]\n\t};{\n\t\t[setTokenImage(getTokenPortrait())]\n\t\t[setTokenVBL(getProperty('door_open_VBL'))]\n\t}]\n}]\n[h: setProperty(\"door_open\", !isOpen)]\n[h: exposePCOnlyArea()]",
        "maxWidth": "",
        "tooltip": "Included to work with Reverend's Smart Doors",
        "applyToSelected": true,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "3652409d-dc14-4777-8aef-65f120398198",
          "commandChecksum": "a37a0b14630cabf9a61b7a54b9523abf",
          "propsChecksum": "23b9819b2d15dfab1ba0d218d2ee9c96"
        }
      }
    ]
  }},
  "Lib:SimpleDoors": {"0.2":   {
    "mtversion": "1.8.4",
    "timestamp": "2021-04-04T20:31:40.8935501-07:00",
    "notes": "SimpleDoors is a basic approach to doors in MapTool which let the GM quickly toggle the visible state of a cell edge or nearby drawing named 'Door' to block or grant players vision across a line. Users can click directly on the door icon, toggling its state with a handy visual icon. \n\n\nInstallation: \n- Place the Lib:SimpleDoors library on your staging or library map.\n- Copy the 'Create Door' macro to your Campaign or GM macros. \n\nCreating doors: \n- Disable the 'SimpleDoor' handler overlay in the Window -> Overlays menu.\n- Ensure the map you are on has a SQUARE grid type.\n- Create and place doors on edges you wish to behave as doors.\n   - Doors automaticall toggle a line of VBL on the edge they are on. \n   - Alternatively, you can draw custom doors:\n      - Draw a line (exactly 2 points) on any layer. The 'Hidden' layer is recommended. \n      - Right click your new line drawing in the Draw Explorer, click 'Set Name', and set the name to 'Door'.\n      - Center your Door icon within half a cell of the center of your 'Door' line.\n      - You can have as many 'Door' lines as you want on your map.\n\nUsing doors:\n- Enable the 'SimpleDoor Handler' overlay in the Window -> Overlays menu.\n- Simple click on doors. They must be on the 'Token' layer if you want players to be able to toggle them.\n- If the server lets players auto-reveal on movement, SimpleDoors will try to expose visible area when players open doors.\n\n\nNotes:\n- SimpleDoors do not include any movement blocking features, but can work with AI Pathfinding if you check the 'Treat VBL as MBL' option by the AI button in the interaction tools.",
    "gmnotes": "",
    "properties":     {
      "AC": "",
      "Acrobatics": "",
      "AnimalHandling": "",
      "Arcana": "",
      "Artificer": "",
      "Athletics": "",
      "Backstory": "",
      "Barbarian": "",
      "Bard": "",
      "ChaMod": "",
      "ChaSave": "",
      "CharLevel": "",
      "Charisma": "",
      "Class": "",
      "Cleric": "",
      "ConMod": "",
      "ConSave": "",
      "Concentration": "",
      "Constitution": "",
      "Creaturetype": "",
      "CustomCounters": "",
      "DeathFails": "",
      "DeathSuccesses": "",
      "Deception": "",
      "Defense": "",
      "Description": "",
      "DexMod": "",
      "DexSave": "",
      "Dexterity": "",
      "DisplayHP": "",
      "Druid": "",
      "Elevation": "",
      "Exhaustion": "",
      "Fighter": "",
      "HD10": "",
      "HD12": "",
      "HD20": "",
      "HD4": "",
      "HD6": "",
      "HD8": "",
      "HP": "",
      "History": "",
      "HitDieUsed": "",
      "Initiative": "",
      "InitiativeBonus": "",
      "Insight": "",
      "IntMod": "",
      "IntSave": "",
      "Intelligence": "",
      "Intimidation": "",
      "Investigation": "",
      "MaxHP": "",
      "Medicine": "",
      "Monk": "",
      "Movement": "",
      "Nature": "",
      "Paladin": "",
      "PassiveInsight": "",
      "PassivePerception": "",
      "Perception": "",
      "Performance": "",
      "Persuasion": "",
      "PresentationGender": "",
      "Proficiency": "",
      "PronounAbsolutePossessive": "",
      "PronounObjective": "",
      "PronounPossessive": "",
      "PronounSubjective": "",
      "Race": "",
      "Ranger": "",
      "ReadyAction": "",
      "Religion": "",
      "Rogue": "",
      "Senses": "",
      "Simple5eData": "",
      "SleightOfHand": "",
      "Sorcerer": "",
      "Speed": "",
      "Stealth": "",
      "StrMod": "",
      "StrSave": "",
      "Strength": "",
      "Survival": "",
      "TempHP": "",
      "TempMaxHP": "",
      "TrueClass": "",
      "TrueRace": "",
      "Unconverted5eMob": "",
      "UsedHD10": "",
      "UsedHD12": "",
      "UsedHD20": "",
      "UsedHD4": "",
      "UsedHD6": "",
      "UsedHD8": "",
      "Warlock": "",
      "WisMod": "",
      "WisSave": "",
      "Wisdom": "",
      "Wizard": "",
      "__BOBIFLE_COMPATIBILITY__": "",
      "__CHARACTER_META_ATTRIBUTES__": "",
      "__CLASS_RACE_HD__": "",
      "__GM_META__": "",
      "__ILLYDTH_COMPATIBILITY__": "",
      "__MECHANICS_META__": "",
      "__MODIFIERS__": "",
      "__SAVES__": "",
      "__SKILLS__": "",
      "__STATES_META__": "",
      "__STATS__": "",
      "___JSON_AND_LIBRARY_PROPERTIES___": "",
      "____CLASS_LEVELS____": "",
      "____HD____": "",
      "____MAKE_PROPERTIES_EDITABLE____": "",
      "____POST_CONVERSION_BACKUP_PROPERTIES____": "",
      "eHP": "",
      "eMaxHP": "",
      "issSpellBuffs": "",
      "issSpellDebuffs": "",
      "libAuthor": "Melek / Lionel Di Giacomo",
      "libAuthorURI": "",
      "libDefaults":       {
        "LibName": "Lib:SimpleDoors",
        "LibID": "112DCE431A244500B749CF30A9BA65E6",
        "LibMap": "Grasslands"
      },
      "libName": "",
      "libSettings":       {
        "LibName": "Lib:SimpleDoors",
        "LibID": "112DCE431A244500B749CF30A9BA65E6",
        "LibMap": "Grasslands"
      },
      "libURI": "",
      "libVersion": 0.2,
      "mCR": "",
      "mPerception": "",
      "mSpeed": "",
      "mname": ""
    },
    "macros":     [
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2. Macros",
        "includeLabel": false,
        "sortBy": "",
        "index": 1,
        "label": "checkDoors",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: vMode = \"\"]\n[h: vLastSelection = \"\"]\n[h: vDoorTokens = \"\"]\n\n[h: vToggleDoor = 0]\n[h: json.toVars(macro.args, \"v\")]\n\n[h, if(vMode != \"Initialize\"), code: {\n\t[foreach(vToken, getTokens()), if(getGMName(vToken) == \"SimpleDoor\"):\n\t\tvDoorTokens = listAppend(vDoorTokens, vToken)]\n\t[abort(listCount(vDoorTokens))]\n}]\n\n[h, if(vMode == \"checkDoor\"), code: {\n\t[vToken = getSelected()]\n\t[if(listContains(vDoorTokens, vToken)), code: {\n\t\t[vToggleDoor = 1]\n\t\t[vDoorToken = vToken]\n\t};{}]\n};{}]\n\n[h, if(vToggleDoor), code: {\n\t[switchToken(vDoorToken)]\n\t[vAutoReveal = json.get(getInfo(\"server\"), \"auto reveal on movement\")]\n\n\t[h: vPointsJSON = simpleDoors.getSimpleDoorPoints()]\n\t\n\t[h: vDoorInfo\t= getGMNotes()]\n\t[h: vDoorStatus = json.get(vDoorInfo, \"Status\")]\n\t\n\t[h, if(vDoorStatus == \"Open\"), code: {\n\t\t[setGMNotes(json.set(vDoorInfo, \"Status\", \"Closed\"))]\n\t\t[setTokenPortrait(getTokenImage())]\n\t\t[setTokenImage(getTokenHandout())]\t\n\t\t[setTokenHandout(getTokenPortrait())]\n\t\t[setTokenPortrait(\"\")]\n\t\t[simpleDoors.lineVBL(\"draw\", vPointsJSON)]\n\t};{\n\t\t[setGMNotes(json.set(vDoorInfo, \"Status\", \"Open\"))]\n\t\t[setTokenPortrait(getTokenImage())]\n\t\t[setTokenImage(getTokenHandout())]\t\n\t\t[setTokenHandout(getTokenPortrait())]\n\t\t[setTokenPortrait(\"\")]\n\t\t[simpleDoors.lineVBL(\"erase\", vPointsJSON)]\n\t}]\n\n\t[if(vAutoReveal && !isGM()): exposeAllOwnedArea()]\n\t\t\n\t[if(vLastSelection == \"\"):\n\t\tdeselectTokens();\n\t\tselectTokens(vLastSelection, 0, \",\")]\n};{}]\n\n[h: vThisMacro = getMacroName() + \"@\" + getMacroLocation())]\n[overlay(\"SimpleDoor Handler\"): {\n<html>\n<head>\n\t<link rel='onChangeSelection' type='macro' href='[r: macroLinkText(vThisMacro, \"none\", json.set(\"{}\", \"Mode\", \"checkDoor\", \"LastSelection\", getSelected()))]'>\n<\/head>\n<\/html>\n}]",
        "maxWidth": "",
        "tooltip": "Toggles locks and refreshes the handler overlay.",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "2fda0a28-527d-4750-8041-aecd8ec3ad2a",
          "commandChecksum": "bc87bd2573a327450b8c6fb8e78e6e6e",
          "propsChecksum": "bef0faf974ed338eb02a372a99b15433"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2.2 Automation",
        "includeLabel": false,
        "sortBy": "",
        "index": 2,
        "label": "onCampaignLoad",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: execLink(macroLinkText(\"checkDoors@\" + getMacroLocation(), \"none\", json.set(\"{}\", \"Mode\", \"Initialize\")), 0, \"all\")]\n[h: vFuncPrefix = \"simpleDoors.\"]\n[h: defineFunction(vFuncPrefix + \"findClosestLine\", \"findClosestLine@\" + getMacroLocation(), 1)]\n[h: defineFunction(vFuncPrefix + \"findClosestGridEdge\", \"findClosestGridEdge@\" + getMacroLocation(), 1)]\n[h: defineFunction(vFuncPrefix + \"lineVBL\", \"lineVBL@\" + getMacroLocation(), 1)]\n[h: defineFunction(vFuncPrefix + \"getSimpleDoorPoints\", \"getSimpleDoorPoints@\" + getMacroLocation(), 1)]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "77b123a4-b461-4d9d-bbb7-8a5fc2e4c2ee",
          "commandChecksum": "031ceaca0bb4381cd4d9218b424c4f36",
          "propsChecksum": "9576debe4bb2217e91476197d7b016c8"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2. Macros",
        "includeLabel": false,
        "sortBy": "",
        "index": 3,
        "label": "createDoor",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: vMode = \"createDoor\"]\n[h: vLibMap = json.get(getLibProperty(\"libSettings\", getMacroLocation()), \"LibMap\")]\n[h: json.toVars(macro.args, \"v\")]\n\n[h, if(vMode == \"createDoor\"), code: {\n\t[vThisMacro = getMacroName() + \"@\" + getMacroLocation()]\n\t\n\t<!-- Find screen center and setup new token values -->\n\t[vViewCenterXY = getViewCenter(0, \"json\")]\n\t[vNewDoorX = json.get(vViewCenterXY, \"centerX\")]\n\t[vNewDoorY = json.get(vViewCenterXY, \"centerY\")]\n\t[vUpdates = json.set(\"{}\", \"x\", \t\tvNewDoorX, \n\t\t\t\t\t\t\t   \"y\", \t\tvNewDoorY,\n\t\t\t\t\t\t\t   \"layer\",\t\t\"Token\", \n\t\t\t\t\t\t\t   \"gmName\",\t\"SimpleDoor\",\n\t\t\t\t\t\t\t   \"name\",\t\t\"Door\")]\n\t\t\t\t\t\t\t   \n\t<!-- Create a copy of the lib token, which doubles as our template -->\n\t[vNewDoor = copyToken(getMacroLocation(), 1, vLibMap, vUpdates)]\n\n\t<!-- Set token size based on current map grid size. -->\n\t[setSize(\"Diminutive\", vNewDoor)]\n\n\t<!-- Swap images to start in 'Open' state -->\n\t[setTokenImage(getTokenHandout(\"\", vNewDoor), vNewDoor)]\n\t[setTokenHandout(getTokenPortrait(\"\", vNewDoor), vNewDoor)]\t\n\t[setTokenPortrait(\"\", vNewDoor)]\n\t\n\t<!-- Clear any notes and initialize Doored door. -->\n\t[setNotes(\"\", vNewDoor)]\n\t[setGMNotes(json.set(\"{}\", \t\"Status\", \"Open\"), vNewDoor)]\n\n\t<!-- Set over VBL, Customize opacity and ensure snap to grid -->\n\t[setAlwaysVisible(1, vNewDoor)]\n\t[setTokenOpacity(0.75, vNewDoor)]\n\t[setTokenSnapToGrid(0, vNewDoor)]\n\n\t<!-- Remove macros --> \n\t[vMacroList = getMacros(\"json\", vNewDoor)]\n\t[foreach(vMacro, vMacroList, \"\"): \n\t\tremoveMacro(number(getMacroIndexes(vMacro, \"\", vNewDoor)), vNewDoor)]\n\n\t[broadcast(\"<b>New Door created!<\/b> \" + macroLink(\"Click for usage help\", \"showHelp@\" + getMacroLocation()) + \".\", \"gm\")]\n}]\n",
        "maxWidth": "",
        "tooltip": "This macro creates a SimpleDoor in the middle of the screen.\n",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "183104d7-a84d-4158-930f-38e9ff0dfbc1",
          "commandChecksum": "1567cb83565d810703143afb56f4012a",
          "propsChecksum": "ca3a6055bd192ef0fbdcb4c896578628"
        }
      },
            {
        "autoExecute": true,
        "color": "#a0ffa0",
        "fontColor": "black",
        "group": "3. Tools",
        "includeLabel": false,
        "sortBy": "",
        "index": 4,
        "label": "Control Panel",
        "fontSize": "1.10em",
        "minWidth": "180px",
        "playerEditable": false,
        "command": "[h: \"<!-- Set Default Arguments -->\"]\n[h: vSettingsToChange = \"libSettings\"]\n\n[h: \"<!-- Get Arguments -->\"]\n[h: json.toVars(macro.args, \"v\")]\n\n[h: \"<!-- Get Library Data -->\"]\n[h: vLibSettingsRaw = getLibProperty(vSettingsToChange))]\n\n[h: \"<!-- Set Variables -->\"]\n[h: vLibSettings = vLibSettingsRaw]\n[h: vLibStrProps = \"{}\"]\n[h: vLibStrPropsInput = \"\"]\n\n[h: \"<!-- Separate Property Lists from Single Values -->\"]\n[h, foreach(vKey, vLibSettingsRaw, \"\"), code: {\n\t[vValue = json.get(vLibSettingsRaw, vKey)]\n\t[vIsValueStrProp = countStrProp(string(vValue))]\n\t[if(vIsValueStrProp > 0), code: {\n\t\t[vLibStrProps = json.set(vLibStrProps, vKey, vValue)]\n\t\t[vLibStrPropsInput = listAppend(vLibStrPropsInput, \"vLibSetting.\" + vKey + \"|\" + vValue + \"|\" + vSettingsToChange + \".\" + vKey + \"|PROPS|SPAN=TRUE SETVARS=UNSUFFIXED\", \"##\")]\n\t\t[vLibSettings = json.remove(vLibSettings, vKey)]\n\t}]\n}]\n\n[h: \"<!-- Display Input Dialog -->\"]\n[h: \"<!-- Must convert properties from JSON to String Property Lists and back -->\"]\n[h: vLibSettings = json.toStrProp(vLibSettings)]\n[h: abort(input( \"vLibSettings | \" + vLibSettings + \" | \" + token.name + \" - \" + vSettingsToChange +\"| PROPS | SPAN=TRUE SETVARS=UNSUFFIXED\", vLibStrPropsInput))]\n\n[h: vLibSettings = json.fromStrProp(vLibSettings)]\n\n[h: \"<!-- Recombine String Property List values into JSON and add to vLibSettings -->\"]\n[h, foreach(vKey, vLibStrProps, \"\"), code: {\t\n\t[eval(\"vValue = vLibSetting.\" + vKey)]\n\t[vLibSettings = json.set(vLibSettings, vKey, vValue)]\n}]\n\n[h: \"<!-- Finally, write vLibSettings back to token properties -->\"]\n[h: setLibProperty(vSettingsToChange, vLibSettings))]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "5e6492e6-c3ee-49d9-beeb-19160da5fee9",
          "commandChecksum": "8d034e6030af98f1b3845a6ce4a3f8b8",
          "propsChecksum": "f055a63bd7e2a21605355f0d0a7fe4c5"
        }
      },
            {
        "autoExecute": true,
        "color": "navy",
        "fontColor": "white",
        "group": "3. Tools",
        "includeLabel": false,
        "sortBy": "2",
        "index": 5,
        "label": "Initialize",
        "fontSize": "1.00em",
        "minWidth": "53.5px",
        "playerEditable": false,
        "command": "[h: vSelected = getSelected()]\n[h: vCurrent = currentToken()]\n\n[h: json.toVars(macro.args, \"v\")]\n\n[h, if(vSelected != vCurrent), code: {\n\t[broadcast( getMacroName() + \" Error: Please select the Library token before running.\", getPlayerName())]\n\t[abort(0)]\n};{}]\n\n[h: vLibName = getMacroLocation()]\n[h: vLibMap = getTokenMap(getMacroLocation())]\n[h: vLibID = findToken(vLibName, vLibMap)]\n\n[h: vInitSettings = json.set(\"{}\", \"LibName\", vLibName, \"LibID\", vLibID, \"LibMap\", vLibMap)]\n\n[h: libSettings = getLibProperty(\"libSettings\")]\n[h: libDefaults = getLibProperty(\"libDefaults\")]\n\n[h, if(json.type(libSettings) == \"OBJECT\"): \n\tsetLibProperty(\"libSettings\", json.merge(libSettings, vInitSettings));\n\tsetLibProperty(\"libSettings\", vInitSettings)]\n[h, if(json.type(libDefaults) == \"OBJECT\"):\n\tsetLibProperty(\"libDefaults\", json.merge(libDefaults, vInitSettings));\n\tsetLibProperty(\"libDefaults\", vInitSettings)]\n\n[h: broadcast( \"<strong>\" + vLibName + \" initialized!<\/strong> Token defaults and settings have been updated current token name, token ID, and map.\", getPlayerName())]\n",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "e368541d-0b0a-40c6-9b77-22a97bebf033",
          "commandChecksum": "40b600cfbb2c8d5c865f2211fbd863e3",
          "propsChecksum": "ad4ffca636c2dbb4ccff0be17c70c63b"
        }
      },
            {
        "autoExecute": true,
        "color": "purple",
        "fontColor": "white",
        "group": "3. Tools",
        "includeLabel": false,
        "sortBy": "2",
        "index": 6,
        "label": "Reset",
        "fontSize": "1.00em",
        "minWidth": "53.5px",
        "playerEditable": false,
        "command": "[h: \"<!-- Check -->\"]\n[h: abort(input(\"header | Are you sure you want to clear your custom settings? || LABEL | SPAN=TRUE\"))]\n\n[h: \"<!-- Reset library settings -->\"]\n[h: setLibProperty(\"libSettings\", getLibProperty(\"libDefaults\"))]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "86a6d00a-71ab-4aee-b558-8c9c676fbc58",
          "commandChecksum": "774d22d2f688885dc471710b7eaa6100",
          "propsChecksum": "25e889c7fe5ed06d8558dcf166311467"
        }
      },
            {
        "autoExecute": true,
        "color": "maroon",
        "fontColor": "white",
        "group": "3. Tools",
        "includeLabel": false,
        "sortBy": "3",
        "index": 7,
        "label": "Edit Defaults",
        "fontSize": "1.00em",
        "minWidth": "53.5px",
        "playerEditable": false,
        "command": "[h: \"<!-- Check -->\"]\n[h: abort(input(\"header | Are you sure you want to edit the default settings? || LABEL | SPAN=TRUE\",\n\t\t\t\t\"header | This can break the library token if you don't know what you're doing! || LABEL | SPAN=TRUE\"))]\n\n[macro(\"Control Panel@this\"):json.set(\"{}\", \"SettingsToChange\", \"libDefaults\")]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "274fe1a6-236e-407a-b438-9071365387be",
          "commandChecksum": "5ecc83193e2fb1859a3a00f58d351f2f",
          "propsChecksum": "42e2c7741896e00baaeb68e286986e57"
        }
      },
            {
        "autoExecute": true,
        "color": "#a0ffa0",
        "fontColor": "black",
        "group": "1. Drag to GM Panel",
        "includeLabel": false,
        "sortBy": "",
        "index": 9,
        "label": "Create Door",
        "fontSize": "1.10em",
        "minWidth": "85px",
        "playerEditable": false,
        "command": "[h: abort(isGM())]\n[macro(\"createDoor@Lib:SimpleDoors\"):\"\"]",
        "maxWidth": "",
        "tooltip": "Creates a new door.",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "c9a736fb-5b02-419d-bf14-5e9bf81394d6",
          "commandChecksum": "1ca84041e5686839c25e77a9ccef2f05",
          "propsChecksum": "8ffd7417dc0562900f37e960ace8cf4a"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2. Macros",
        "includeLabel": false,
        "sortBy": "",
        "index": 10,
        "label": "showHelp",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: vMsg = \"<b>Using SimpleDoors<\/b><br> \n* Uncheck the SimpleDoor Handler from the Window -> Overlays menu to move Doors around. Re-enable it to use Doors in play.<br> \n* Place a door along the edge whose VBL you want to toggle. If you wish, you can edit the Door token and click the Config tab, and in the layout editor place the lock image along the appropriate edge.<br> \n* Your door will not block vision until you close it.<br> \n* To toggle VBL of a door that is not a grid edge, draw a 2-point line with the Drawing tool (Hidden layer is OK) and set the drawing's name to 'Door' if you want a custom VBL door. Place the Door token within half a grid cell of the center of the line and it will automattically toggle VBL over the line when opened/closed.\n* You can name your door as you wish, such as 'Iron Door' or 'Treasure chest'. Just leave the 'GM Name' equal to 'SimpleDoor'.\"]\n[h: broadcast(vMsg, \"gm\")]",
        "maxWidth": "",
        "tooltip": "Basic usage help.",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "6a5b4ac9-ba27-4bdd-8579-3b796457e7a0",
          "commandChecksum": "bd7364919dfc2e30611b6097055c9c29",
          "propsChecksum": "b09d5b7feacbcc049f320e364464e104"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2.1 Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 12,
        "label": "findClosestLine",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: vToken = currentToken()]\n[h, if(argCount() > 0): vToken = arg(0)]\n[h: vDoorIds = findDrawings(getCurrentMapName(), \"Door\")]\n[h: vXmid                = \"\"]\n[h: vYmid                = \"\"]\n[h: vClosestDoorDistance = \"\"]\n[h: vClosestDoorPoints   = \"\"]\n[h, foreach(vDoorId, vDoorIds, \"\"), code: {\n\t[vPoints = json.get(getDrawingInfo(getCurrentMapName(), vDoorId), \"path\")]\n\t[if(json.length(vPoints) == 2), code: {\n\t\t[vX1 = json.get(json.get(vPoints, 0), \"x\")]\n\t\t[vX2 = json.get(json.get(vPoints, 1), \"x\")]\n\t\t[vY1 = json.get(json.get(vPoints, 0), \"y\")]\n\t\t[vY2 = json.get(json.get(vPoints, 1), \"y\")]\n\t\t[vXmid = floor((vX1 + vX2) / 2)]\n\t\t[vYmid = floor((vY1 + vY2) / 2)]\n\t\t[vXtoken = getTokenX(1, vToken) + (getTokenWidth(vToken)  / 2)]\n\t\t[vYtoken = getTokenY(1, vToken) + (getTokenHeight(vToken) / 2)]\n\t\t[vDeltaX = vXmid - vXtoken]\n\t\t[vDeltaY = vYmid - vYtoken]\n\t\t[vDoorDistance = math.hypot(vDeltaX, vDeltaY)]\n\t\t[if(vClosestDoorDistance == \"\"): \n\t\t\tvClosestDoorDistance =  vDoorDistance]\n\t\t[if(vClosestDoorDistance >= vDoorDistance):\n\t\t\tvClosestDoorPoints = vPoints]\n\t\t[if(vClosestDoorDistance >= vDoorDistance):\n\t\t\tvClosestDoorDistance = vDoorDistance]\t\t\n\t}]\n}]\n\n[h: \"<!-- Build and return JSON, which has both the distance and the points JSON -->\"]\n[h: vReturnJSON = json.set(\"{}\", \"distance\", vClosestDoorDistance, \"points\", vClosestDoorPoints)]\n[h: return(0, vReturnJSON)]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "74131c85-9006-41dc-b440-560d690c18f0",
          "commandChecksum": "066ae4e98a7a3758d3f535fd384b480e",
          "propsChecksum": "650c6ed17020eb4b80a0484f651e7a7a"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2.1 Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 13,
        "label": "findClosestGridEdge",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: \"<!-- Get Map information -->\"]\n[h: vMapInfo  = getInfo(\"map\")]\n[h: vCellSize = json.path.read(vMapInfo, \"grid.size\")]\n[h: vGridType = json.path.read(vMapInfo, \"grid.type\")]\n[h: vXOffset  = json.path.read(vMapInfo, \"grid.['x offset']\")]\n[h: vYOffset  = json.path.read(vMapInfo, \"grid.['y offset']\")]\n[h, if(vGridType != \"Square\"): \n\tlog.error(\"<b style='color:red'>Warning: SimpleDoors are only designed to work on maps with SQUARE grids!<\/b>\", \"gm\")]\n\n[h: \"<!-- Get Token Center Coordinates-->\"]\n[h: vX = math.floor(getTokenX() + (getTokenWidth() / 2))]\n[h: vY = math.floor(getTokenY() + (getTokenHeight() / 2))]\n\n[h, if(vX >= 0): \n\tvXModCellSize = math.mod(vX, vCellSize);\n \tvXModCellSize = vCellSize - math.abs(math.mod(vX, vCellSize))]\n[h, if(vY >= 0): \n\tvYModCellSize = math.mod(vY, vCellSize);\n \tvYModCellSize = vCellSize - math.abs(math.mod(vY, vCellSize))]\n\n[h: vLeftEdgeX   = vX - vXModCellSize + vXOffset]\n[h: vTopEdgeY    = vY - vYModCellSize + vYOffset]\n[h: vRightEdgeX  = vLeftEdgeX + vCellSize]\n[h: vBottomEdgeY = vTopEdgeY  + vCellSize]\n\n[h: \"<!-- Build list of edges (CSS Ordering, Top-Right-Bottom-Left) -->\"]\n[h: vTopEdge    = json.append(\"\", json.set(\"{}\", \"x\", vLeftEdgeX,  \"y\", vTopEdgeY),\n\t\t\t\t\t\t   \t      json.set(\"{}\", \"x\", vRightEdgeX, \"y\", vTopEdgeY))]\n\t\t\t\t\t\t   \t      \n[h: vRightEdge  = json.append(\"\", json.set(\"{}\", \"x\", vRightEdgeX, \"y\", vTopEdgeY),\n\t\t\t\t  \t\t   \t      json.set(\"{}\", \"x\", vRightEdgeX, \"y\", vBottomEdgeY))]\t\t\t\t\t\t   \t      \n[h: vBottomEdge = json.append(\"\", json.set(\"{}\", \"x\", vLeftEdgeX,  \"y\", vBottomEdgeY),\n\t\t\t  \t\t  \t   \t      json.set(\"{}\", \"x\", vRightEdgeX, \"y\", vBottomEdgeY))]\n\t\t\t  \t\t  \t   \t      \n[h: vLeftEdge   = json.append(\"\", json.set(\"{}\", \"x\", vLeftEdgeX,  \"y\", vTopEdgeY),\n\t\t\t\t\t\t   \t      json.set(\"{}\", \"x\", vLeftEdgeX,  \"y\", vBottomEdgeY))]\n\n[h: vEdges = json.append(\"\", vTopEdge, vRightEdge, vBottomEdge, vLeftEdge)]\n\n[h: \"<!-- Figure our edge distances into list with a corresponding index -->\"]\n[h: vEdgeDistances = \"\"]\n[h: vEdgeDistances = listAppend(vEdgeDistances, math.abs(vY - vTopEdgeY))]\n[h: vEdgeDistances = listAppend(vEdgeDistances, math.abs(vX - vRightEdgeX))]\n[h: vEdgeDistances = listAppend(vEdgeDistances, math.abs(vY - vBottomEdgeY))]\n[h: vEdgeDistances = listAppend(vEdgeDistances, math.abs(vX - vLeftEdgeX))]\n\n[h: \"<!-- Get the JSON from the closest edge -->\"]\n[h: vClosestEdgeDistance = math.listMin(vEdgeDistances)]\n[h: vClosestEdgeIndex = listFind(vEdgeDistances, vClosestEdgeDistance)]\n[h: vClosestEdgeJSON = json.get(vEdges, vClosestEdgeIndex)]\n\n[h: \"<!-- Build and return JSON, which has both the distance and the points JSON -->\"]\n[h: vReturnJSON = json.set(\"{}\", \"distance\", vClosestEdgeDistance, \"points\", vClosestEdgeJSON)]\n[h: return(0, vReturnJSON)]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "77248524-83a0-4925-936c-86f829790f80",
          "commandChecksum": "a3a29b8a7642f476d0104779a86f4fc9",
          "propsChecksum": "494a8edc0ea9ffc45eaa166796b3331f"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2.1 Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 14,
        "label": "lineVBL",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: vErrorMsg = \n\tgetMacroName() + \" error: requires a single JSON array of 2 JSON point objects. Example: [{'x':0, 'y':0}, {'x':100,'y':0}]\"]\n\n[h, if(argCount() != 2): \t\t      assert(0, vErrorMsg)]\n[h: vVBLPoints = arg(1)]\n[h, if(json.type(vVBLPoints) != \"ARRAY\" || json.length(vVBLPoints) != 2): assert(0, vErrorMsg)]\n\n[h: vVBLShape   = json.set(\"{}\", \"shape\", \"polygon\", \"close\", 0, \"points\", vVBLPoints)]\n[h: vVBLJSON    = json.append(\"\", vVBLShape)]\n\n[h: vMode = lower(arg(0))]\n[h, if(vMode == \"draw\"):  drawVBL(vVBLJSON)]\n[h, if(vMode == \"erase\"): eraseVBL(vVBLJSON)]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "d4046417-fb4d-493e-a455-a670bf7a4c2a",
          "commandChecksum": "9e174ea5822448f49b6139a0978f7857",
          "propsChecksum": "8835de0e79112d8999ff449918a90fd0"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2.1 Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 15,
        "label": "getSimpleDoorPoints",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: \"<!-- Get Map information -->\"]\n[h: vMapInfo  = getInfo(\"map\")]\n[h: vCellSize = json.path.read(vMapInfo, \"grid.size\")]\n[h: vGridType = json.path.read(vMapInfo, \"grid.type\")]\n[h, if(vGridType != \"Square\"): \n\tlog.error(\"<b style='color:red'>Warning: SimpleDoors are only designed to work on maps with SQUARE grids!<\/b>\", \"gm\")]\n\n[h: \"<!-- Set Token -->\"]\n[h: vToken = currentToken()]\n[h, if(argCount() > 0): vToken = arg(0)]\t\n\t\n[h: vClosestEdge = simpleDoors.findClosestGridEdge()]\n[h: vClosestLine = simpleDoors.findClosestLine()]\n[h: vLineDistance = json.get(vClosestLine, \"distance\")]\n[h, if(vLineDistance != \"\"), code: {\n\t\t[if(vLineDistance <= vCellSize / 2): \n\t\t\tvClosestPoints = json.get(vClosestLine, \"points\");\n\t\t\tvClosestPoints = json.get(vClosestEdge, \"points\")]\n};{\n\t[vClosestPoints = json.get(vClosestEdge, \"points\")]\n}]\n\n[h: return(0, vClosestPoints)]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "4b32f91c-6d9f-4f96-9741-aa1bf1a93f8c",
          "commandChecksum": "d515229f16c263b36b38a445e3bbb7a6",
          "propsChecksum": "ed244793f17b6fffa8e50e538b23a273"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "default",
        "group": "1. Drag to GM Panel",
        "includeLabel": false,
        "sortBy": "",
        "index": 16,
        "label": "exportLibJSON",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": true,
        "command": "[h, code: {\n\t[h: vPropsJSON = \"{}\"]\n\t[h, foreach(vProp, getPropertyNamesRaw(), \"\"): \n\tvPropsJSON = json.set(vPropsJSON, vProp, getRawProperty(vProp))]\n\n\t[h: vMacrosJSON = \"\"]\n\t[h, foreach(vLabel, getMacros(\"json\"), \"\"), code: {\n    [foreach(vIndex, getMacroIndexes(vLabel), \"\"):\n\t  \tvMacrosJSON = json.append(vMacrosJSON, getMacroProps(vIndex, \"json\"))]\n\t}]\n\t\n\t[h: vISOTime     = json.get(getInfo(\"Client\"), \"isoTimeDate\")]\n\t[h: vTimeVersion = \"0.0.\" + listget(replace(vISOTime, \"[- :T]\", \"\"), 0, \".\")]\n\t\n\t[h: vLibVersion = getLibProperty(\"libVersion\")]\n\t[h, if(vLibversion == \"\"):\n\t\tvLibVersion = vTimeVersion]\n\t[h: vJSON = json.set(\"{}\", getName(), json.set(\"{}\", vLibVersion,\n\t\tjson.set(\"{}\",\n\t\t\"mtversion\" , json.get(getInfo(\"client\"), \"version\"),\n\t\t\"notes\"\t\t, getNotes(),\n\t\t\"gmnotes\"\t, getGMNotes(),\n\t\t\"properties\", vPropsJSON,\n\t\t\"macros\"\t, vMacrosJSON)))]\n}]\n\n[frame5(\"JSON Output\", \"width=640;height=480;temporary=1;\"): {\n<html>\n<body style=\"margin:0;padding:0;\">\n<textarea style=\"height:100%; width:100%;\" readonly>\n[r: json.indent(vJSON, 2)]\n<\/textarea>\n<\/body>\n<\/html>\n}]\n",
        "maxWidth": "",
        "tooltip": "Displays Name/GM Name/Label, Notes, Properties, and Macros to a single JSON.",
        "applyToSelected": true,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "45e3f587-5d0d-407c-bfac-c7368ddc6ee3",
          "commandChecksum": "3cd37dd3ec9984cfe9deb250cf428ca7",
          "propsChecksum": "d0d9822dcb12ce61035890930418c2aa"
        }
      }
    ]
  }},
  "Lib:Rat": {"0.1":   {
    "mtversion": "1.8.4",
    "timestamp": "2021-04-04T20:31:40.9495446-07:00",
    "notes": "MapTool Library Revision Automation Toolkit (Lib:Rat)",
    "gmnotes": "",
    "properties":     {
      "____Library_Advanced_Data____": "",
      "____Library_Basic_Data____": "",
      "____Library_Meta_Data____": "",
      "jobj.HTTPresponses": {},
      "libAuthor": "Melek",
      "libAuthorURL": "",
      "libCache": "",
      "libData": {"": "REST_TIMEOUT_OR_ERROR"},
      "libMap": "[r: getTokenMap(libName)]",
      "libName": "[r: getName()]",
      "libSettings": "",
      "libTitle": "MapTool Library Revision Admin Tools",
      "libURL": "",
      "libUpdateURL": "http://melek.dev",
      "libVersion": 0.1,
      "libdefaultupdateurl": "http://google.com"
    },
    "macros":     [
            {
        "autoExecute": true,
        "color": "lime",
        "fontColor": "black",
        "group": "",
        "includeLabel": false,
        "sortBy": "",
        "index": 1,
        "label": "List Libraries",
        "fontSize": "1.15em",
        "minWidth": "180px",
        "playerEditable": false,
        "command": "[macro(\"showFrame@\" + libName): \"\"]",
        "maxWidth": "",
        "tooltip": "View and update this campaign's Library Tokens",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "28e23ade-92ea-4db7-a4a2-0a3c1483b78e",
          "commandChecksum": "a61c73b1851bc9794588586004e25b02",
          "propsChecksum": "c72f0a0c92e88f7f2fff4251e7f0afa2"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "2.0 Automation",
        "includeLabel": false,
        "sortBy": "",
        "index": 2,
        "label": "onCampaignLoad",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: \"<!-- Set a special function to indicate that OCL has run on this lib token. -->\"]\n[h: defineFunction(\"OCL.\" + getLibProperty(\"libOCL\"), \"onCampaignLoad@\" + getMacroLocation())]\n\n[h: \"<!-- Set functions automatically in the the UDF group. -->\"]\n[h: vUDFGroup = \"1.0 User Defined Functions\"]\n[h: vFunctionPrefix = \"librat.\"]\n[h, foreach(vMacroIndex, getMacroGroup(vUDFGroup)), code: {\n\t[vMacro = getStrProp(getMacroProps(vMacroIndex), \"label\")]\n\t[defineFunction(vFunctionPrefix + vMacro, vMacro + \"@\" + getMacroLocation())]\n}]\n\n[h: vJObjectProps = json.append(\"\", \n\t\"jobj.HTTPresponses\")]\n[h, foreach(vJObjectProp, vJObjectProps), code: {\n\t[vType = json.type(getLibProperty(vJObjectProp))]\n\t[if(vType != \"OBJECT\"): setLibProperty(vJObjectProp, \"{}\")]\n}]\n",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "3fae351f-4970-4637-9118-bccddf2e5f05",
          "commandChecksum": "c0f2733e7c8e9df95df2e069f8933f72",
          "propsChecksum": "47e3f7a51363b22499fac017b8706ef7"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1.0 User Defined Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 3,
        "label": "isValidURL",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: macro.return = matches(arg(0), '^(ftp|http|https):\\/\\/[^ \"]+\\$')]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "64bb8d57-9ff9-4b18-a709-079e85651f79",
          "commandChecksum": "e89d9cbba0c90425978d67f878635385",
          "propsChecksum": "a5826d17696182c0d7de9ec6133fd1bb"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1.0 User Defined Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 4,
        "label": "getUpdate",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: assert(argCount(), \"librat.getUpdate() Requires a single URL argument.\")]\n[h: vURL = arg(0)]\n\n[h: vDataProp = \"libData\"]\n[h: vJObject = getLibProperty(vDataProp)]\n[h: setLibProperty(vDataProp, json.set(vJObject, vURL, \"REST_TIMEOUT_OR_ERROR\"))]\n\n[h, if(librat.isValidURL(vURL) == 1):\n\texeclink(\n\t\tmacroLinkText(\"tryREST@\" + getMacroLocation(), \n\t\t\"none\", \n\t\tjson.set(\"{}\", \"URL\", vURL)), 1);\n\tsetLibProperty(\n\t\tvDataProp, \n\t\tjson.set(vJObject, vURL, \"INVALID_URL\"))]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "d140a5dd-40f1-4e95-a490-3baba578bab5",
          "commandChecksum": "00a842ffaaee753739e4c0c9b40381c8",
          "propsChecksum": "758c21503d6afdc627847f3786138149"
        }
      },
            {
        "autoExecute": true,
        "color": "orange",
        "fontColor": "black",
        "group": "",
        "includeLabel": false,
        "sortBy": "1",
        "index": 5,
        "label": "Get Update JSON",
        "fontSize": "1.10em",
        "minWidth": "85px",
        "playerEditable": false,
        "command": "[h: \"<!-- Get all LibUpdateURL values -->\"]\n[h: vUpdateURLs = json.append(\"\", getLibProperty(\"libDefaultUpdateURL\"))]\n[h: vLibInfo = librat.getLibs()]\n[h: vLibNames = json.fields(vLibInfo, \"json\")]\n[h, foreach(vLib, vLibNames), code: {\n\t[vURL = getLibProperty(\"libUpdateURL\", vLib)]\n\t[if(vURL != \"\"): vUpdateURLs = json.append(vUpdateURLs, vURL)]\n}]\n\n[h: \"<!-- Save last run's data and clear data property -->\"]\n[h, if(getLibProperty(\"libData\") != \"\" && getLibProperty(\"libData\") != \"{}\" ): \n\tsetLibProperty(\"libData.backup\", getLibProperty(\"libData\")]\n[h: setLibProperty(\"libData\"), \"{}\"]\n\n[h: \"<!-- Coordinate Deferred updates to JSON -->\"]\n[h, foreach(vURL, vUpdateURLs):\n\texecLink(macroLinkText(\"tryREST@\" + libName), 1)]\n\n[h: \"<!-- Reload Libraries frame if present -->\"]\n[macro(\"List Libraries@\" + getLibProperty(\"libName\")]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "dc1e097e-44de-4834-8d04-a2aeb877d92b",
          "commandChecksum": "fa478e3e8d95cf54e13fd12908cd3984",
          "propsChecksum": "bc07942ee9e8b7289c58dc92dce3add9"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1.0 User Defined Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 7,
        "label": "atoi",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: macro.return = \nlistFind(\n\t\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\", \n\tlower(\n\t\tsubstring(\n\t\t\targ(0), 0, min(length(arg(0)), 1)\n\t\t)\n\t)\n) + 65]",
        "maxWidth": "",
        "tooltip": "librat.atoi(string) returns the ASCII value of the first character of a string.",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "9ba69871-38e8-444c-9465-755f100a7cfb",
          "commandChecksum": "cd25a54fec9fbfc67c2ba4f2c3eb1691",
          "propsChecksum": "7354164017b45e29cf67d603b6ef2200"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1.1 Deferred execLink Macros",
        "includeLabel": false,
        "sortBy": "",
        "index": 8,
        "label": "tryREST",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: json.toVars(macro.args, \"v\")]\n[h: vDataProp = \"libData\"]\n[h: vJObject = getLibProperty(vDataProp)]\n[h: vNewJObject = json.set(vJObject, vURL, REST.get(vURL, 0))]\n[h: setLibProperty(vDataProp, vNewJObject)]",
        "maxWidth": "",
        "tooltip": "<html><body style='width:180px'>Used by isValidRest() to determine valid REST URLs by setting JObject_Prop with the results of REST.get on REST_URL.\n<br><br>Usage: tryRest(REST_URL, JObject_Prop)\n<\/body><\/html>",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "b5f22e21-0bfe-4eae-a11a-1a3a24f5c659",
          "commandChecksum": "c8944d4484cb22977dd04fda9fb1f0a9",
          "propsChecksum": "83cfd7231712fa4da890898e12a0f9ad"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1.1 Deferred execLink Macros",
        "includeLabel": false,
        "sortBy": "",
        "index": 11,
        "label": "showFrame",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: \"<!-- Guarantee OCL has run. -->\"]\n[h: vOCL = isFunctionDefined(\"OCL.\" + getLibProperty(\"libOCL\")]\n[h, if(!vOCL): execLink(macroLinkText(\"onCampaignLoad@\" + getMacroLocation()))]\n\n[h: \"<!-- Grab a list of Library Tokens. -->\"]\n[h: vLibInfo = librat.getLibs()]\n[h: vLibs = json.sort(json.fields(vLibInfo, \"json\"))]\n\n[h: \"<!-- Set style variables, define CSS, and render frame. -->\"]\n[h: vFrameTitle = \"MapTool Library Revision Admin Tools\"]\n[h: vFrameProps = \"\"]\n[h: vLibMenuItemHeight = \"6rem\"]\n[h: vCSS = \"\n:root {\n\tfont-size: 12px;\n}\n\nbody {\n\tfont-size: inherit;\n}\n\n::-webkit-scrollbar {\n  -webkit-appearance: auto;\n  background-color: rgba(255, 128, 64, .1);\n  width: .75rem;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: rgba(48, 48, 32, .25);\n}\n\na {\n\ttext-decoration: none;\n}\n\ndiv {\n\tmargin: 0;\n\tpadding: 0;\n}\n\n.lib-menu {\n\tpadding: 0;\n\tlist-style: none;\n}\n\n.lib-menu__item {\n\tdisplay: flex;\n\tflex-direction: row;\n\tmin-height: \" + vLibMenuItemHeight + \";\n\tmargin-bottom: .5rem;\n\tbackground: white;\n}\n\n.lib-menu__item__img { \n\tdisplay: block;\n\theight: \" + vLibMenuItemHeight + \";\n}\n\n.lib-menu__item__info {\n\tflex-grow: 2;\n\tpadding: .5rem;\n\tpadding-bottom: 0;\n}\n\n.lib-menu__item__info__libname {\n\tfont-weight: bold;\n\tfont-size: 1.25rem;\t\n}\n\n.lib-menu__item__updates {\n\ttext-align: right;\n\tpadding: .5rem;\n\tpadding-bottom: 0;\n\tcolor:gray;\n}\n\n.lib-menu__item__updates--outdated {\n\tcolor:red;\n}\n\n.lib-menu__item__updates--current {\n\tcolor:green;\n}\n\n\"]\n\n[frame5(vFrameTitle, vFrameProps): {\n<html>\n<head>\n<style>[r: vCSS]<\/style>\n<\/head>\n<body>\n<ul class=\"lib-menu\">\n[h: \"<!-- Loop to render Library token data. -->\"]\n[r, foreach(vLib, vLibs, \"\"), code: {\n\n<li class=\"lib-menu__item\">\n<img class=\"lib-menu__item__img\" src=\"[r: getImage(vLib)]\">\n<div class=\"lib-menu__item__info\">\t\n\t<div class=\"lib-menu__item__info__libname\">[r: vLib]<\/div>\n\t[r, if(getLibProperty(\"libTitle\", vLib) != \"\"): '\n\t<div class=\"lib-menu__item__info__libtitle\">' + getLibProperty(\"libTitle\", vLib) + '<\/div>']\n\t<div class=\"lib-menu__item__info__author\">\n\t\t[r, if(getLibProperty(\"libAuthorURI\", vLib) != \"\"): \n\t\t\t\"<a href='\" + getLibProperty(\"libAuthorURI\", vLib) + \"'>\"]\n\t\t[r, if(getLibProperty(\"libAuthor\", vLib) != \"\"): getLibProperty(\"libAuthor\", vLib); \"Unknown Author\"]\n\t\t[r, if(getLibProperty(\"libAuthorURI\", vLib) != \"\"): \"<\/a>\"]\n\t<\/div>\n\t<div class=\"lib-menu__item__info__version\">\n\t\t[r, if(getLibProperty(\"libVersion\", vLib) != \"\"): getLibProperty(\"libVersion\", vLib); \"Unknown Version\"]\n\t<\/div>\n<\/div>\n[h: vUpdateStatus = table(\"status\")]\n<div class=\"lib-menu__item__updates lib-menu__item__updates--[r: vUpdateStatus]\">\n[r: capitalize(vUpdateStatus)]\n<\/div>\n<\/li>\n}]\n<\/ul>\n<\/body>\n<\/html>\n}]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "cf5d641f-f03a-431e-852b-c0eec6b12a79",
          "commandChecksum": "93e3287afec85e4231d0a5178b6419dc",
          "propsChecksum": "1fe43822bdf4195092ff1e122c96d1db"
        }
      },
            {
        "autoExecute": true,
        "color": "fuchsia",
        "fontColor": "black",
        "group": "1.1 Deferred execLink Macros",
        "includeLabel": false,
        "sortBy": "",
        "index": 12,
        "label": "verifyREST",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: json.toVars(macro.args, \"v\")]\n[vJObject = getLibProperty(vJObjectProp)]\n[vResponse = json.get(vJObject, vURL)]\n[h, if(json.type(vResponse) != \"OBJECT\" \n    && vResponse != \"REST_TIMEOUT\" \n    && vResponse != \"INVALID_URL\"), code: \n\tvNewJObject = json.set(vJObject, vURL, \"INVALID_RESPONSE\")]\n[h, if(vNewJObject != vJObject): setLibProperty(vJObjectProp, vNewJObject)]",
        "maxWidth": "",
        "tooltip": "<html><body style='width:180px'>Used by verifyREST to determine valid JSON Objects after tryREST.\n<br><br>Usage: tryRest(REST_URL, JObject_Prop)\n<\/body><\/html>",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "7b07614b-5dda-4261-8a12-594716490dc6",
          "commandChecksum": "7d7bd66f0a79c853e5cb26565a8b09bb",
          "propsChecksum": "0cd08a526d3591f1f9388f0919dbcea9"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1.0 User Defined Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 13,
        "label": "gtver",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: \"<!-- Set up debugging -->\"]\n[h: vDebugMsg = \"librat.gtver: \")]\n\n[h: \"<!-- If the argument count is incorrect, take user input. -->\"]\n[h: log.debug(vDebugMsg + \"argCount() == \" + argCount())]\n[h, if(argCount() == 2), code: {\n\t[vLeftArg     = replace(arg(0), \"^[vV][a-zA-Z]*\", \"\")]\n\t[vRightArg    = replace(arg(1), \"^[vV][a-zA-Z]*\", \"\")]\n\t[vClicked     = false]\n};{\n\t[broadcast(vDebugMsg + \"Detecting click context.\"))]\t\t\t\n\t[abort(input(\"vLeftArg  | 1.4rc-2  | Left Version  | TEXT |\",\n\t             \"vRightArg | 1.4rc-1 | Right Version | TEXT |\"))]\n \t[vClicked = true]\n}]\n\n[h: \"<!-- If the versions are equal, return false. -->\"]\n[h: log.debug(vDebugMsg + \"Precheck - Comparing \" + vLeftArg + \" != \" + vRightArg)]\n[h: return(vLeftArg != vRightArg, 0)]\n\n[h: \"<!-- First check for 'BoT' style versions (45, 45a, 45b, 46, etc. -->\"]\n[h: vSimpleRegEx    = \"^([0-9]+)([a-zA-Z]*)\\$\"]\n[h: vSimpleLeftFID  = strfind(vLeftArg,  vSimpleRegEx)]\n[h: vSimpleRightFID = strfind(vRightArg, vSimpleRegEx)]\n\n[h, if(getFindCount(vSimpleLeftFID)  == 1 && \n       getFindCount(vSimpleRightFID) == 1), code: {\n         [h: \"<!-- Check numbers first -->\"]\n         [vLeft  = number(getGroup(vSimpleLeftFID,  1, 1))]\n         [vRight = number(getGroup(vSimpleRightFID, 1, 1))]\n         [if(vLeft != vRight), code:{\n         \t [if(vClicked): broadcast(vDebugMsg + \"\" + (vLeft > vRight))]\n\t\t     [log.debug(vDebugMsg + \"SimpleVer - Comparing \" + vLeft + \", \" + vRight)]         \t \n             [return(0, vLeft > vRight)]\n         }]\n             \n         [h: \"<!-- No luck? Then check letters -->\"]\n         [vLeft  = librat.atoi(getGroup(vSimpleLeftFID,  1, 2))]\n         [vRight = librat.atoi(getGroup(vSimpleRightFID, 1, 2))]\n     \t [if(vClicked): broadcast(vDebugMsg + (vLeft > vRight))]\n\t     [log.debug(vDebugMsg + \"SimpleVer - Comparing \" + vLeft + \", \" + vRight)]\n         [return(0, vLeft > vRight)]\n}]\n\n[h: \"<!-- Next try Semver-ish check, 1.12.1 > 1.12 > 1.12rc-2 > 1.1a, etc -->\"]\n[h: vRegEx    = \"[^0-9a-zA-Z]*([0-9]*)[^.0-9a-zA-Z]*([a-zA-Z]*)[^.0-9a-zA-Z]*([0-9]*)\"]\n[h: vGroups   = 3]\n[h: vLeftFID  = strfind(vLeftArg,  vRegEx)]\n[h: vRightFID = strfind(vRightArg, vRegEx)]\n\n[h: vLeftMatches  = getFindCount(vLeftFID) ]\n[h: vRightMatches = getFindCount(vRightFID)]\n[h: vMatches      = min(vLeftMatches, vRightMatches)]\n\n[h, for(vMatch, 1, vMatches), code: {\n\t[for(vGroup, 1, vGroups + 1), code: {\n\t\t[log.debug(vDebugMsg + \"SemVer - Match: \" + vMatch + \", Group: \" + vGroup]\n\t\t[vLeft  = getGroup(vLeftFID,  vMatch, vGroup)]\n\t\t[vRight = getGroup(vRightFID, vMatch, vGroup)]\n\t\t[log.debug(vDebugMsg + \"SemVer - Comparing \" + vLeft + \", \" + vRight)]\n\t\t[if(vGroup == 2): log.debug(vDebugMsg + \"SemVer - post atoi: \" + vLeft + \", \" + vRight)]\n\t\t[if(vGroup == 2): vLeft  = librat.atoi.semver(vLeft )]\n\t\t[if(vGroup == 2): vRight = librat.atoi.semver(vRight)]\n\t\t\n\t\t[if(vLeft != vRight && vClicked == true):\n\t\t\tbroadcast(vDebugMsg + (vLeft > vRight))]\t    \n\t    [if(vLeft != vRight): return(0, vLeft > vRight)]\n\t}]\n}]\n\n[h: \"<!-- In a tie, return 1 if left side has more version number matches -->\"]\n[if(vClicked): \n\tbroadcast(vDebugMsg + vLeftMatches > vRightMatches)]\n[h: log.debug(vDebugMsg + \"Fallback Match Number Comparison - Comparing \" + vLeftMatches + \", \" + vRightMatches)]\n[h: return(0, vLeftMatches > vRightMatches)]",
        "maxWidth": "",
        "tooltip": "gtver(version1, version2) returns 1 if version1 is > version2, else 0.",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "75e79d16-d6f6-48f4-8355-d48865a3dbb9",
          "commandChecksum": "5dab2465b9c03f4e9312124c2cd95f28",
          "propsChecksum": "f47f266cf890a6ecae5bf7e4b6235ae0"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1.0 User Defined Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 16,
        "label": "showChatProgress",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: vPercent = arg(0)]\n[h: vTaskName = arg(1)]\n[h, if(argCount() > 2): vTaskNote = arg(2); vTaskNote = \"\"]\n\n[h: vSteps = 20]\n[h: vStep  = 100 / vSteps]\n[h: vProgressBar = \"\"]\n[h, count(vSteps): vProgressBar = vProgressBar \n\t+ if(roll.count * vStep <= vPercent * 100, \"*\", \".\")]\n\n[h, if(vPercent < vStep / 100): \n\tvPercentSign = \"  % \";\n\tvPercentSign = if(vPercent == 1, \"% \", \" % \")]\n\n[h: vProgressMsg = \n      vTaskName \n\t+ \": <code>[\" + vProgressBar + \"] \" \n\t+ floor(vPercent * 100) + vPercentSign + \"<\/code>\"\n\t+ vTaskNote]\n\t\n[h: broadcast(vProgressMsg, \"gm\")]",
        "maxWidth": "",
        "tooltip": "showChatProgress(percent, taskName [, taskNote]) broadcasts a progress bar in chat to GMs.",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "3a0ae8e3-fa22-47b9-8b38-226398871724",
          "commandChecksum": "645c7e9b978b0a2817d8137c306ffe43",
          "propsChecksum": "983281df23cac2cc2c9ba10036a20072"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1.0 User Defined Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 17,
        "label": "getLibs",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: macro.return = json.get(getInfo(\"client\"), \"library tokens\")]",
        "maxWidth": "",
        "tooltip": "librat.getLibs() returns the getInfo() library token JSON to the calling macro.",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "cba90e98-0fa6-4a92-a991-572fad764de6",
          "commandChecksum": "18f19ce70cc1d5b966ad3e95e900602f",
          "propsChecksum": "713d9085bacf757c6e41654006ea447e"
        }
      },
            {
        "autoExecute": true,
        "color": "fuchsia",
        "fontColor": "black",
        "group": "1.0 User Defined Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 18,
        "label": "getTestJSON",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[r: macro.return = '\n{\n\t\"lib:OnTokenMove\" : { \n\t\t\"48b\" : {\n\t\t\t\"mtversion\" :  \"1.8.4\",\n\t\t\t\"notes\" :      {},\n\t\t\t\"gmnotes\" :    {},\n\t\t\t\"properties\" : {},\n\t\t\t\"macros\" :     {}\n\t\t}, \n\t\t\"48a\" : {\n\t\t\t\"mtversion\" :  \"1.8.3\"\n\t\t},\n\t\t\"48\" : {\n\t\t\t\"mtversion\" :  \"1.8.3\"\n\t\t} \n\t}\n\t\"Lib:Rat\" : {\n\t\t\"0.1a\" : {\n\t\t\t\"mtversion\" :  \"1.8.4\",\n\t\t\t\"notes\" :      {},\n\t\t\t\"gmnotes\" :    {},\n\t\t\t\"properties\" : {},\n\t\t\t\"macros\" :     {}\n    \t}\n\t}\n}']\n\n",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "c952668e-cb18-431f-b00a-07fc6c0a7a5f",
          "commandChecksum": "28ba7188fa6c2bff2fe32fe35778a3ec",
          "propsChecksum": "26b3bfb43eb5ee212d5e5da73bc7a753"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1.0 User Defined Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 19,
        "label": "atoi.semver",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: \"<!-- If the argument count is incorrect, take user input. -->\"]\n[h, if(argCount() == 1), code: {\n\t[vAlphaString     = lower(arg(0))]\n\t[vClicked         = false]\n};{\n\t[abort(input(\"vAlphaString | rc | Left Semver alpha group | TEXT |\"))]\n\t[vAlphaString = lower(vAlphaString)]\n \t[vClicked = true]\n}]\n\n[h: \"<!-- No alpha string is a release version. -->\"]\n[h, if(vAlphaString == 0 || vAlphaString == \"\"), code: {\n\t[vReturn = 2000)]\n\t[if(vClicked): broadcast(\"librat.atoi.semver: \" + vReturn)]\n\t[return(0, vReturn)]\n}]\n\n[h: \"<!-- Elevate 'rc' above othre pre-release versions. -->\"]\n[h, if(vAlphaString == \"rc\"), code: { \n\t[vReturn = 1900)]\n\t[if(vClicked): broadcast(\"librat.atoi.semver: \" + vReturn)]\n\t[return(0, vReturn)]\n};{\n\t[vReturn = librat.atoi(vAlphaString)]\n\t[if(vClicked): broadcast(\"librat.atoi.semver: \" + vReturn))]\t\n\t[return(0, vReturn)]\n}]",
        "maxWidth": "",
        "tooltip": "atoi.semver(versionAlpha) converts alpha characters to an integer such that \"\" > rc > b > a etc.",
        "applyToSelected": false,
        "compare":         [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":         {
          "uuid": "93f90fe4-1e69-4faa-b2e9-7d7a8fdc57b6",
          "commandChecksum": "bbfb161e7f2819720eac6fa258a5a8c2",
          "propsChecksum": "ace1e5b3c2c2afdb332c167aeaebf4b8"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "1.2 Tests",
        "includeLabel": false,
        "sortBy": "",
        "index": 20,
        "label": "gtver.tst",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: vTestJSON = json.append(\"\", \n\tjson.append(\"\", \"1\", \"1\", 0),\n\tjson.append(\"\", \"48b\", \"48b\", 0),\n\tjson.append(\"\", \"2.0rc-1\", \"2.0rc-1\", 0),\t\n\tjson.append(\"\", \"v1.2b-3\", \"Ver2.0\", 0),\n\tjson.append(\"\", \"Ver2.0\", \"v1.2b-3\", 1),\t\n\tjson.append(\"\", \"45\", \"45d\", 0),\t\n\tjson.append(\"\", \"-5\", \"2\", 1),\n\tjson.append(\"\", \"2\", \"-5\", 0),\n\tjson.append(\"\", \"0.5b\", \"0.5\", 0),\n\tjson.append(\"\", \"0.5\", \"0.5b\", 1),\n\tjson.append(\"\", \"45d\", \"45\", 1),\n\tjson.append(\"\", \"45\", \"45d\", 0),\n\tjson.append(\"\", \"1.8.5rc-1\", \"1.8.5rc-2\", 0),\n\tjson.append(\"\", \"1.8.5rc-2\", \"1.8.5rc-1\", 1))]\n\n[h: vTestNum = 0]\n[h, foreach(vTest, vTestJSON), code: {\n\t[vArg0           = json.get(vTest, 0)]\n\t[vArg1           = json.get(vTest, 1)]\t\n\t[vExpectedOutput = json.get(vTest, 2)]\n\t[vActualOutput   = librat.gtver(vArg0, vArg1)]\n\t[if(vExpectedOutput == vActualOutput), code: {\t\n\t\t[vResultColor = \"blue\"]\n\t\t[vResultMsg   = \"Success\"]\t\t\n\t};{\n\t\t[vResultColor = \"red\"]\n\t\t[vResultMsg   = \"Error, expected \" + vExpectedOutput]\t\t\n\t}]\n\t[vTestNum = vTestNum + 1]\n\t[broadcast( strformat(\"<tt style='color:%{vResultColor}'>%{vTestNum}| Testing librat.gtver(%{vArg0}, %{vArg1}) - %{vResultMsg}: %{vActualOutput}<\/tt>\"))]\n}]",
        "maxWidth": "",
        "tooltip": "",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "a188ede2-c5a6-4112-b1c9-be0495e54850",
          "commandChecksum": "cc3c7ad865d8589368da290c126b9e4a",
          "propsChecksum": "ad25d1a10ae2c554325e717839a0e211"
        }
      },
            {
        "autoExecute": true,
        "color": "default",
        "fontColor": "default",
        "group": "1.0 User Defined Functions",
        "includeLabel": false,
        "sortBy": "",
        "index": 21,
        "label": "exportLibJSON",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h: vLibsJSON = \"{}\"]\n[h: vLibs     = librat.getLibs()]\n[h: vLibTotal = json.length(vLibs)]\n[h: vLibNum   = 0]\n[h, foreach(vLib, vLibs), code: {\n\t[librat.showChatProgress(vLibNum / vLibTotal, \"Compiling Library JSON for Export\", getName(vLib))]\n\t[vPropsJSON = \"{}\"]\n\t[foreach(vProp, getPropertyNamesRaw(\"json\", vLib), \"\"): \n\t\tvPropsJSON = json.set(vPropsJSON, vProp, getRawProperty(vProp, vLib))]\n\n\t[vMacrosJSON = \"\"]\n\t[foreach(vLabel, getMacros(\"json\", vLib), \"\"), code: {\n\t    [foreach(vIndex, getMacroIndexes(vLabel, \"json\", vLib), \"\"):\n\t\t  \tvMacrosJSON = json.append(vMacrosJSON, getMacroProps(vIndex, \"json\", vLib))]\n\t\t}]\n\t\n\t[vLibVersion = getLibProperty(\"libVersion\", vLib)]\n\t[vISOTimeDate = json.get(getInfo(\"Client\"), \"isoTimeDate\")]\n\t[if(vLibversion == \"\"):\n\t\tvLibVersion = \"Unknown.\" + vISOTimeDate]\n\t[vLibsJSON = json.set(vLibsJSON, getName(vLib), json.set(\"{}\", \n\t\tvLibVersion,\tjson.set(\"{}\",\n\t\t\t\"mtversion\" , json.get(getInfo(\"client\"), \"version\"),\n\t\t\t\"timestamp\" , vISOTimeDate,\n\t\t\t\"notes\"\t\t, getNotes(vLib),\n\t\t\t\"gmnotes\"\t, getGMNotes(vLib),\n\t\t\t\"properties\", vPropsJSON,\n\t\t\t\"macros\"\t, vMacrosJSON)))]\n    [vLibNum = vLibNum + 1]\n}]\n[h: librat.showChatProgress(vLibNum / vLibTotal, \"Compiling Library JSON for Export\", \"Done!\")]\n\n[frame5(\"JSON Output\", \"width=640;height=480;temporary=1;\"): {\n<html>\n<body style=\"margin:0;padding:0;\">\n<textarea style=\"height:100%; width:100%; overflow: auto;\" readonly>\n[r: json.indent(vLibsJSON, 2)]\n<\/textarea>\n<\/body>\n<\/html>\n}]\n",
        "maxWidth": "",
        "tooltip": "Displays Name/GM Name/Label, Notes, Properties, and Macros to a single JSON.",
        "applyToSelected": false,
        "compare": [],
        "metadata":         {
          "uuid": "68c7d919-b8ea-4e1e-a57d-b151389afe77",
          "commandChecksum": "5e6abbbba2b6e8929d5140a0f666e13e",
          "propsChecksum": "ba208b1fe0f45ecee751e5fb7fac1dd5"
        }
      }
    ]
  }}
}
