{
    "Name": "Lib:CustomCounters",
    "GMName": "",
    "Label": "",
    "Notes": "Hi",
    "GMNotes": "Custom Counters v1.0\n\nThis library contains a drop-in macro called 'Custom Counters' that can be used from anywhere in a campaign to track any kind of simple resources, a lot like using glass counters during a tabletop game.\n\nTo get started, select the token you which to update with custom counters, and click on the macro button. You can add, increment/decrement, and edit counters from the list. You can additionally place the 'Show Counters' button in the Campaign, GM, or any Token macro panel to call the macro remotely.\n\n<u>Options<\/u>\nThere are a few options you can set by changing their definitions in the macro. If you aren't using the Custom Counters macro by reference, it is recommended to do this before copying the macro anywhere in your campaign.\n<b>vPropertyName<\/b>: This is the name of the Token Property the macro stores custom counter JSON data inside of. Change this if you already use 'CustomCounters' as a property name or want to use a different name. You can also add this as a defined token property to edit counters directly from the Edit Token dialog.\n<b>vCounterCategories<\/b>: This is a list of categories for counters. The default list was made to fit well for Dungeons and Dragons 5th Edition, but you can customize it for any game system.\n<b>vCounterTypeList<\/b>: This is a list of reset types. The 'Keys' repesent the option text in the Add/Edit counter dialog box, and the value is the actual counter type that is recorded on the token. The default counter type is an empty string/null value which creates a simple counter without a maximum value. All others create a maximum value.\n\n<u>Getting Fancy<\/u>\nYou can copy-past the 'Adjust Counter' macro to make your own special counte radjustment macros, or call it from another macro to increment the counters.\nYou can use Counter Types to reset or affect a counter based on a condition in another macro. For instance, you can have a 'Short Rest' macro that looks for any counters with 'Short Rest' as the counter type and then resets the value to maximum. You can see the 'Short Rest' and 'Long Rest' macros in my Simple 5e library for examples.\n\nTo change the counter values programmatically, you will need to write macros using JSON. The data format is very simple array of objects with up to 5 keys: 'name', 'category', 'value', and optionally 'max' and 'type'.\n\nThere are no property dependencies in these macros that aren't configurable, and the core macro in particular is extremely portable and will work from any macro panel. \n\nHave Fun!",
    "Properties":   {
      "AC": "",
      "Acrobatics": "",
      "AnimalHandling": "",
      "Arcana": "",
      "Artificer": "",
      "Athletics": "",
      "Backstory": "",
      "Barbarian": "",
      "Bard": "",
      "ChaMod": "",
      "ChaSave": "",
      "CharLevel": "",
      "Charisma": "",
      "Class": "",
      "Cleric": "",
      "ConMod": "",
      "ConSave": "",
      "Concentration": "",
      "Constitution": "",
      "Creaturetype": "",
      "CustomCounters": [],
      "DeathFails": "",
      "DeathSuccesses": "",
      "Deception": "",
      "Defense": "",
      "Description": "",
      "DexMod": "",
      "DexSave": "",
      "Dexterity": "",
      "DisplayHP": "",
      "Druid": "",
      "Elevation": "",
      "Exhaustion": "",
      "Fighter": "",
      "HD10": "",
      "HD12": "",
      "HD20": "",
      "HD4": "",
      "HD6": "",
      "HD8": "",
      "HP": "",
      "History": "",
      "HitDieUsed": "",
      "Initiative": "",
      "InitiativeBonus": "",
      "Insight": "",
      "IntMod": "",
      "IntSave": "",
      "Intelligence": "",
      "Intimidation": "",
      "Investigation": "",
      "MaxHP": "",
      "Medicine": "",
      "Monk": "",
      "Movement": "",
      "Nature": "",
      "Paladin": "",
      "PassiveInsight": "",
      "PassivePerception": "",
      "Perception": "",
      "Performance": "",
      "Persuasion": "",
      "PresentationGender": "",
      "Proficiency": "",
      "PronounAbsolutePossessive": "",
      "PronounObjective": "",
      "PronounPossessive": "",
      "PronounSubjective": "",
      "Race": "",
      "Ranger": "",
      "ReadyAction": "",
      "Religion": "",
      "Rogue": "",
      "Senses": "",
      "Simple5eData": "",
      "SleightOfHand": "",
      "Sorcerer": "",
      "Speed": "",
      "Stealth": "",
      "StrMod": "",
      "StrSave": "",
      "Strength": "",
      "Survival": "",
      "TempHP": "",
      "TempMaxHP": "",
      "TrueClass": "",
      "TrueRace": "",
      "Unconverted5eMob": "",
      "UsedHD10": "",
      "UsedHD12": "",
      "UsedHD20": "",
      "UsedHD4": "",
      "UsedHD6": "",
      "UsedHD8": "",
      "Warlock": "",
      "WisMod": "",
      "WisSave": "",
      "Wisdom": "",
      "Wizard": "",
      "__BOBIFLE_COMPATIBILITY__": "",
      "__CHARACTER_META_ATTRIBUTES__": "",
      "__CLASS_RACE_HD__": "",
      "__GM_META__": "",
      "__MECHANICS_META__": "",
      "__MODIFIERS__": "",
      "__SAVES__": "",
      "__SKILLS__": "",
      "__STATES_META__": "",
      "__STATS__": "",
      "___JSON_AND_LIBRARY_PROPERTIES___": "",
      "____CLASS_LEVELS____": "",
      "____HD____": "",
      "____MAKE_PROPERTIES_EDITABLE____": "",
      "____POST_CONVERSION_BACKUP_PROPERTIES____": "",
      "eHP": "",
      "eMaxHP": "",
      "libAuthor": "Melek / Lionel Di Giacomo",
      "libDefaults": "",
      "libSettings": "",
      "libVersion": 1,
      "mCR": "",
      "mPerception": "",
      "mSpeed": "",
      "mname": ""
    },
    "Macros":   [
          {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "3. Examples",
        "includeLabel": false,
        "sortBy": "",
        "index": 8,
        "label": "Show Counters",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[macro(\"Custom Counters@Lib:CustomCounters\"): \"\"]",
        "maxWidth": "",
        "tooltip": "<html><body style=\"width:200px\">\nAdd, Edit, and Remove custom counters on a token.\n<hr>\nThis is a reference to the Custom Counters macro on a library token. Drag it onto any macro panel for quick access.\n<\/body><\/html>",
        "applyToSelected": true,
        "compare":       [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":       {
          "uuid": "a320e12c-9411-484d-a333-f69851e20aaa",
          "commandChecksum": "c21c563ddaec6c807951341f744e85e2",
          "propsChecksum": "260fffee7b504c8302861eef36926505"
        }
      },
          {
        "autoExecute": true,
        "color": "default",
        "fontColor": "default",
        "group": "1. Core Macro",
        "includeLabel": false,
        "sortBy": "",
        "index": 1,
        "label": "Custom Counters",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h, code: {\"\n\t<!-- This is an Advanced Macro\n\t\n\tBe default, show the user a menu of options. \n\tThis can be overwritten by a passed 'Mode' \n\targument in a json object when calling this \n\tmacro from another macro. \n\t\n\tValid modes are:\n\t\tCloseMenu - Closes the dialog\n\t\tCounter Manager - Displays the counters in a table\n\t\tAdd New Counter - Adds or edits one counter\n\t\tAdjust Counter - Adds or Subtracts from a counter\n\t\tClear Counters - Removes one or all counters\n\n\tThis is a generic version of this macro which was\n\toriginally written for Melek's Simple 5e framework:\n\t\n\t-->\"}]\n\n[h: \"<!-- Set default category options and expected property name. -->\"]\n[h: vPropertyName = \"CustomCounters\"]\n[h: vCounterCategories = \"Backpack, Class, Race, Special, Spells\"]\n[h: vCounterTypeList = json.set(\"{}\" , \n\t\t\"Simple/No Max Value\", \"\",\n\t\t\"Resets on Long Rest\", \"Long Rest\",\t\n\t\t\"Resets on Short and Long Rest\", \"Short Rest\",\n\t\t\"Has Max without reset (Adv.)\", \"Manual\")]\n\n[h: \"<!-- Set default arguments -->\"]\n[h: vMode = \"Counter Manager\"]\n[h: vCounterToClear = \"\"]\n[h: vCounterToEdit = \"\"]\n[h: vInfo = isGM()]\n\n[h: \"<!-- Accept passed arguments and set non-configurable variables -->\"]\n[h: json.toVars(macro.args, \"v\")]\n[h: vDialogName = \"Custom Counters\"]\n[h: vThisMacro = getMacroName() + \"@\" + \n\tif(listGet(getMacroLocation(), 0, \":\") == \"Token\", \"TOKEN\", getMacroLocation())]\n\n[h: \"<!-- Use getProperty() for compatibility -->\"]\n[h: vCustomCounters = getProperty(vPropertyName)]\n\n[h: \"<!-- Perform some validation -->\"]\n[h: vSelectedCount = listCount(getSelected())]\n[h, if(vSelectedCount != 1), code: {\n\t[vFirstSelected = listGet(getSelected(), 0)]\n\t[if(currentToken() == vFirstSelected): \n\t\tassert(0, getMacroName() + \" Error: This macro can only be run on a single token at a time! You have \" + vSelectedCount + \" tokens selected.\");\n\t\tabort(0)]\n}]\n\n[h, if(json.length(vCustomCounters) > 0): vNumberOfCounters = \n\ttoken.name + \" has \" + json.length(vCustomCounters) + \" custom counter\" + \n\tif(json.length(vCustomCounters) > 1, \"s\", \"\") + \".<hr>\"; \n\tvNumberOfCounters = token.name + \" has no custom counters.<hr>\"]\n\n\t\t\n[h, if(vInfo): log.info(\"vCustomCounters type: \" + json.type(vCustomCounters))]\n[h, if(json.type(vCustomCounters) != \"ARRAY\"), code: {\n\t[if(length(vCustomCounters) == 0): vCustomCounters = \"[]\"; \n\t\tassert(0, \"<html>\" + getMacroName() + \" <br>vCustomCounters: \" + vCustomCounters + \"<\/html>\", 0)]\n\t[if(vInfo): log.info(\"Validated successful, set vCustomCounters to blank JSON array...\")]\t\t\n};{\n\t[if(vInfo): log.info(\"Validation successful...\")]\n}]\n\n[h, if(vInfo): log.info(\"Inital mode: \" + vMode)]\n[h, if(vMode == \"CloseMenu\"), code: {\n\t[if(vLastToken != getSelected()): closeDialog(vDialogName)]\n};{}]\n\n[h, if(vMode == \"Counter Manager\"), code: {\n\t[if(vInfo): log.info(\"Entering Menu Dialog...\")]\n\n\t<!-- These color variables are the same as the default Character Sheet. -->\n\t[vSheetColor = \"#faefe0\"]\n\t[vHeaderTextColor = \"#700000\"]\n\t[vBorderColor = \"#af7070\"]\n\t[vBoxHeaderTextColor = \"black\"]\n\t[vBoxHeaderBackgroundColor = \"#E0E0E0\"]\n\t[vBoxColor = \"white\"]\n\t[vBoxColorAlt = \"#EFEFFF\"]\t\n\t[vBoxTextColor = \"black\"]\t\n\t[vAdjustLinkStyle = 'text-decoration:inherit;']\t\n\t[vBoxWidth = 275]\n\n\t[vEventLinkArgs = json.set(\"{}\", \"Mode\", \"CloseMenu\", \"LastToken\", currentToken())]\n\t[vEventLink = \"<link rel='onChangeSelection' type='macro' href='\" + \n\t\tmacroLinkText(vThisMacro, \"none\", vEventLinkArgs, \"selected\") + \"'>\"]\n\t[vMenuHeader = \"<h2 style='color:\" + vHeaderTextColor + \"'>Add & Edit Counters<\/h2>\"]\n\t[vMenuHeader = vMenuHeader + vNumberOfCounters]\n\t[vMenuLink.addCounter = macroLink(\n\t\t\"Add New Counter\", vThisMacro, \"none\", json.set(\"{}\", \"Mode\", \"Add New Counter\"), \"selected\")]\t\n\t[vMenuLink.removeCounters = macroLink(\n\t\t\"<span style='color:red'>Clear All Counters<\/span>\", vThisMacro, \"none\", json.set(\"{}\", \"Mode\", \"Clear Counters\"),\t\"selected\")]\n\t[if(json.length(vCustomCounters) > 0): \n\t\tvMenuLinks = \"<table style='margin-bottom:8px;width:\" + vBoxWidth + \"px'><tr><td>\" + \n\t\t\tvMenuLink.addCounter + \"<\/td><td align=right>\" + \n\t\t\tvMenuLink.removeCounters + \"<\/td><\/tr><\/table>\";\n\t\tvMenuLinks = \"<h3 style='margin-bottom:4px;'>\" + vMenuLink.addCounter + \"<\/h3>\" + \"\n\t\t\t<div style='margin: 0 16px; padding:0 ; font-size:12px;'>\n\t\t\t<p>Use custom counters to track spells, abilities, ammo,\n\t\t\trations, and anything more you can imagine!<\/p>\n\t\t\t<p>Custom counters can be incremented on this panel or with \n\t\t\tmacro buttons you create.<\/p><\/div>\"]\n\t\t\n\t[vCounterList = json.sort(vCustomCounters, \"asc\", \"name\", \"category\")]\n\t[vCounterEntryTH = \"<td style='border:1px solid \" + vBorderColor + \"; border-right: 0; border-bottom: 0;'>\"]\n\t[vCounterEntryTHCenter = \"<td style='border: 1px solid \" + vBorderColor + \"; border-right: 0; border-bottom: 0; text-align: center;'>\"]\n\t[vCounterMenu = \"<table cellspacing=0 style='width:\" + vBoxWidth + \"px;'><tr style='font-weight:bold;\" + \n\t\t\t\"background-color: \" + vBoxHeaderBackgroundColor + \n\t\t\t\";color: \" + vBoxHeaderTextColor + \n\t\t\t\";border-right: 1px solid \" + vBorderColor + \";'>\" + \n\t\tvCounterEntryTH + \"Category<\/th>\" +\n\t\tvCounterEntryTH + \"Name<\/th>\" +\n\t\tvCounterEntryTH + \"Reset<\/th>\" +\n\t\tvCounterEntryTH + \"Value<\/th>\" + \n\t\tvCounterEntryTHCenter + \"+ / -<\/th>\" +\n\t\tvCounterEntryTH + \"Edit<\/th>\" +\n\t\tvCounterEntryTH + \"✖<\/th>\"] \n\t[foreach(vCounter, vCounterList, \"\"), code: {\n\t\t[vEditLink = macroLink(\"<span style='text-decoration:none;'>Edit<\/span>\", vThisMacro, \"none\", json.set(\"{}\", \"Mode\", \"Add New Counter\", \"CounterToEdit\", vCounter), \"selected\")]\n\t\t[vClearLink = macroLink(\"<span style='color:red;text-decoration:none;'>✖<\/span>\", vThisMacro, \"none\", json.set(\"{}\",  \"Mode\", \"Clear Counters\", \"CounterToClear\", vCounter), \"selected\")]\n\t\t[vCounterName = json.get(vCounter, \"name\")]\n\t\t[vCounterCat = json.get(vCounter, \"category\")]\n\t\t[vCounterValue = json.get(vCounter, \"value\")]\n\t\t[vCounterMax = json.get(vCounter, \"max\")]\n\t\t[vCounterType = json.get(vCounter, \"reset\")]\n\t\t[vCounterEntryIsOdd = math.mod(json.indexOf(vCounterList, vCounter), 2)]\n\t\t[vCounterLastRow = if(json.indexOf(vCounterList, vCounter) == json.length(vCounterList) - 1, \"border-bottom:1px solid \" + vBorderColor + \";\", \"border-bottom: 0;\")]\n\t\t[vCounterEntryTD = \"<td style='border:1px solid \" + vBorderColor + \"; border-right: 0; border-bottom: 0;'>\"]\n\t\t[vCounterEntryTDCenter = \"<td style='border:1px solid \" + vBorderColor + \"; border-right: 0; border-bottom: 0; text-align: center;'>\"]\n\t\t[vCounterMenu = vCounterMenu + \"<tr style='border-right: 1px solid \" + vBorderColor + \";\" + vCounterLastRow + \" background-color: \" + if(vCounterEntryIsOdd, vBoxColor, vBoxColorAlt) + \";'>\" + \n\t\t\tvCounterEntryTD + vCounterCat + \"<\/td>\" + \n\t\t\tvCounterEntryTD + vCounterName + \"<\/td>\" + \n\t\t\tvCounterEntryTD + vCounterType + \"<\/td>\" + \n\t\t\tvCounterEntryTD + vCounterValue + (if(isNumber(vCounterMax), \" / \" + vCounterMax, \"\"))  + \"<\/td>\" + \n\t\t\tvCounterEntryTDCenter + \n\t\t\t\"<a href='\" + \n\t\t\tmacroLinkText( vThisMacro, \"none\", \n\t\t\t\tjson.set(\"{}\", \n\t\t\t\t\t\"Mode\", \"Adjust Counter\", \n\t\t\t\t\t\"CounterName\", json.get(vCounter, \"name\"), \n\t\t\t\t\t\"CounterAdjustment\", 1), currentToken()) + \n\t\t\t\"' style='\" + vAdjustLinkStyle + \"' title='Add 1'><span title='Add 1'>+<\/span><\/a>  \" + \n\t\t\t\"<a href='\" + \n\t\t\tmacroLinkText( vThisMacro, \"none\", \n\t\t\t\tjson.set(\"{}\", \n\t\t\t\t\t\"Mode\", \"Adjust Counter\", \n\t\t\t\t\t\"CounterName\", json.get(vCounter, \"name\"), \n\t\t\t\t\t\"CounterAdjustment\", -1), currentToken()) + \n\t\t\t\"' style='\" + vAdjustLinkStyle + \"' title='Subtract 1'><span title='Subtract 1'>-<\/span><\/a> \" +\n\t\t\t\"<\/td>\" + \n\t\t\tvCounterEntryTD + vEditLink + \"<\/td>\" + \n\t\t\tvCounterEntryTD + vClearLink + \"<\/td><\/tr>\"]\n\t}]\n\t[vCounterMenu = vCounterMenu + \"<\/table>\"]\t\n\t\t\t\t\n\t[frame(vDialogName, \"temporary=0;width=450;height=375\"): { \n\t\t<html>\n\t\t<head>\n\t\t\t[r:vEventLink]\n\t\t<\/head>\n\t\t<body style=\"text-align:center;background-color:[r: vSheetColor];\">\n\t\t\t[r: vMenuHeader]\n\t\t\t[r: vMenuLinks]\n\t\t\t[r, if(json.length(vCustomCounters) > 0): vCounterMenu]\n\t\t<\/body>\n\t\t<\/html>}]\n};{\n\t[if(vInfo): log.info(\"Closing Custom Counters Menu...\")]\n}]\n\n[h, if(vInfo): log.info(\"Mode after menu: \" + vMode)]\n[h, if(vMode == \"Clear Counters\"), code: {\n\t[if(json.type(vCounterToClear) == \"OBJECT\"), code: {\n\t\t\"<!-- Remove Specific Counter -->\"\n\t\t[abort(input(\"header | <html>Really remove this counter?<br>\" + \n\t\t\t\"<b style='color:red'>This cannot be undone!<\/b><pre>\" + \n\t\t\tjson.indent(vCounterToClear, 1) + \n\t\t\t\"<\/pre><\/html> | | LABEL | SPAN=TRUE\"))]\n\t\t[vCustomCounters = json.path.delete(vCustomCounters, \n\t\t\t\".[?(@.name == '\" + json.get(vCounterToClear, \"name\") + \"')]\")]\n\t};{\n\t\t[abort(input(\"header|<html>Clear ALL \" + token.name +\n\t\t\t\"'s custom counters?<br><b style='color:red'>This cannot be undone.<\/b>\" + \n\t\t\t\"<br>Defined Custom Counters:<br><pre style='width:200px'>\"+ \n\t\t\tjson.indent(json.path.read(vCustomCounters, \".name\"),2) + \n\t\t\t\"<\/pre>||LABEL|SPAN=TRUE\"))]\n\t\t[vCustomCounters = \"[]\"]\n\t}]\n\n\t[h: \"<!-- Use getProperty() for compatibility -->\"]\n\t[h: setProperty(vPropertyName, vCustomCounters)]\t\n\t[macro(vThisMacro): \"\"]\n};{}]\n\n[h, if(vMode == \"Adjust Counter\"), code: {\n\t<!-- Grab Counter Info -->\n\t<!-- Assumes vCounterName and vCounterAdjustment are set -->\t\n\t[vCounter = json.get(json.path.read(vCustomCounters, '.[?(@.name == \"' + vCounterName + '\")]'), 0)]\n\t[vCounterValue = json.get(vCounter, \"value\")]\n\t[vCounterMax = json.get(vCounter, \"max\")]\n\t[vNewCounterValue = vCounterValue + vCounterAdjustment]\n\n\t[if(vNewCounterValue < 0): vNewcounterValue = 0]\n\n\t[if(isNumber(vCounterMax)), code: {\n\t\t[if(vNewCounterValue > vCounterMax): vNewCounterValue = vCounterMax]\t\t\n\t};{}]\n\t\n\t<!-- Adjust the counter. -->\t\t\t\t\n\t[vCounterIndex = json.indexOf(vCustomCounters, vCounter)]\n\t[vUpdatedCounter = json.set(vCounter, \"value\", vNewCounterValue)]\n\t[vCustomCounters = json.set(vCustomCounters, vCounterIndex, vUpdatedCounter)]\t\n\n\t[h: \"<!-- Use getProperty() for compatibility -->\"]\n\t[h: setProperty(vPropertyName, vCustomCounters)]\t\n\t[macro(vThisMacro): \"\"]\n};{}]\n\n[h, if(vMode == \"Add New Counter\"), code: {\n\t[if(vInfo): log.debug(\"Setting default Category and Reset lists...\")]\n\t[if(vInfo): log.info(\"vCounterTypeList = \" + vCounterTypeList)]\n\t[vCounterTypes = json.toList(json.fields(vCounterTypeList))]\n\t[if(vInfo): log.info(\"vCounterTypes = \" + vCounterTypes)]\n\t\n\t[if(vInfo): log.info(\"Building Input...\")]\n\t[if(json.type(vCounterToEdit) == \"OBJECT\"), code: {\n\t\t[vNewEditVocab = \"Edit\"]\n\t\t[vCounterName = json.get(vCounterToEdit, \"name\")]\n\t\t[vCounterValue = json.get(vCounterToEdit, \"value\")]\n\t\t[vCounterCat = json.get(vCounterToEdit, \"category\")]\t\t\t\t\n\t\t[vCounterMax = json.get(vCounterToEdit, \"max\")]\n\t\t[if(!isNumber(vCounterMax)): vCounterMax = \"Auto\"]\n\t\t[vCounterTypeString = json.get(vCounterToEdit, \"reset\")]\n\t\t[if(json.get(vCounterTypeList, vCounterTypeEntry) == vCounterTypeString), \n\t\t\tforeach(vCounterTypeEntry, vCounterTypeList, \"\"): \n\t\t\t\tvCounterType = listFind(vCounterTypes, vCounterTypeEntry)]\n\t\t[if(vInfo): log.info(\"vCounterTypeString on edit token: \" + vCounterTypeString)]\t\n\t\t[if(vInfo): log.info(\"vCounterType on edit token: \" + vCounterType)]\t\t\t\t\n\t};{\n\t\t[vNewEditVocab = \"New\"]\n\t\t[vCounterName = \"Arrows\"]\n\t\t[vCounterCat = 0]\n\t\t[vCounterValue = 20]\n\t\t[vCounterType = 0]\n\t\t[vCounterMax = \"Auto\"]\n\t}]\n\n\t[vAddCounterHeader = \n\t\t\"<html><h2><span style='font-size:.9em;'>\" + vNewEditVocab + \" Counter for <\/span><br>\" +\n\t\ttoken.name + \"<\/h2>\" + vNumberOfCounters + \"<\/html>\"]\n\n\t[abort(input(\n\t\t\"header | \" +  vAddCounterHeader + \" |  | LABEL | SPAN=TRUE \",\n\t\t\"vCounterName | \" + vCounterName + \" | Counter Name | TEXT | width=8\",\n\t\t\"vCounterValue | \" + vCounterValue + \" | Counter Value | TEXT | WIDTH=4\",\t\t\t\t\n\t\t\"vCounterCat | \" + vCounterCategories +\n\t\t\t\" | Counter Category | LIST | VALUE=STRING SELECT=\" + listFind(vCounterCategories, vCounterCat),\n\t\t\"vCounterType | \" + vCounterTypes +\n\t\t\t\" | Counter Type | RADIO | SPAN=TRUE VALUE=STRING SELECT=\" + vCounterType,\n\t\t\"vCounterMax | \" + vCounterMax + \" | Counter Max | TEXT | WIDTH=4\"))]\t\n\n\t[vNewCounter = json.set(\"{}\",\n\t\t\"name\", vCounterName,\n\t\t\"category\", vCounterCat,\n\t\t\"value\", vCounterValue)]\n\n\t[if(vInfo): log.info(\"vCounterType(key) = \" + vCounterType)]\n\t[vCounterType = json.get(vCounterTypeList, vCounterType)]\n\t\n\t[if(vInfo): log.info(\"vCounterType(value) = \" + if(vCounterType == \"\", \"none\", vCounterType))]\n\t[if(vCounterType != \"\"):\n\t\tvNewCounter = json.set(vNewCounter, \n\t\t\t\"max\", if(isNumber(vCounterMax), vCounterMax, vCounterValue),\n\t\t\t\"reset\", vCounterType)]\n\t\t\t\n\t[if(vInfo): log.info(\"Existing counters: \" + string(json.path.read(vCustomCounters, \".name\")))]\n\t[if(vInfo): log.info(\"Token to edit: \" + json.type(vCounterToEdit))]\n\t[vExistingCounters = json.path.read(vCustomCounters, \".name\")]\t\n\t[vEditMode = if(json.type(vCounterToEdit) == \"OBJECT\", 1, 0)]\n\t[if(vEditMode): vEditNameChanged = if(vCounterName != json.get(vCounterToEdit, \"name\"), 1, 0); vEditNameChanged = 0]\n\t[vHasDuplicate = json.contains(vExistingCounters, vCounterName)]\n\t[if(vHasDuplicate || vEditMode), code: {\n\t\t[if(vInfo): log.info(\"Found a \" +\n\t\t\tif(vHasDuplicate, \"duplicate\", \"\") + \n\t\t\tif(vHasDuplicate && vEditMode, \" and \", \"\") + \n\t\t\tif(vEditMode, \"a counter to edit.\", \".\"))]\n\t\t[vUpdateMsg = \"<html><b>\" + vNewEditVocab + \" Counter Confirmation<\/b>\"]\n\t\t[if(vEditMode): \n\t\t\tvUpdateMsg = vUpdateMsg + \"<br>You can review your changes below.\"]\n\t\t[if(vHasDuplicate && (vEditNameChanged || !vEditMode)): \n\t\t\tvUpdateMsg = vUpdateMsg + \"<br>\" + token.name + \" already has a counter named '\" + vCounterName + \"' which will be overwritten.\"]\n\t\t[vUpdateMsg = vUpdateMsg + \"<\/html>\"]\n\t\t[vEditMsg = \"\"]\n\t\t[if(vEditMode && vEditNameChanged):\n\t\t\tvEditMsg = vEditMsg + \"## header | \" + \n\t\t\t\"You are creating a copy of your counter, \" + \n\t\t\tif(vHasDuplicate, \"overwiting a different counter.\", \"leaving the original as-is.\") + \" | | LABEL | SPAN=TRUE\"]\n\t\t[if(vHasDuplicate && (!vEditMode || vEditNameChanged)): \n\t\t\tvOrigCounter = json.get(json.path.read(vCustomCounters, \".[?(@.name == '\" + vCounterName + \"')]\"), 0);\n\t\t\tvOrigCounter = vCounterToEdit]\n\t\t[vEditMsg = vEditMsg + \" ## header | \" + \n\t\t\t\"<html><table><tr>\" + \n\t\t\tif(vHasDuplicate, \n\t\t\t\t\"<td>Original:<br>\" + \n\t\t\t\tformatStrProp(json.toStrProp(vOrigCounter), \"<table margin=0 cellpadding=0 cellspacing=6>%list<\/table>\", \n\t\t\t\t\t\"<tr><td><b>%key:<\/b><\/td><td>%value<\/td> <\/tr>\", \"\") + \"<\/pre><\/td>\", \"\") + \n\t\t\t\t\"<td>Updated:<br>\" + \n\t\t\t\tformatStrProp(json.toStrProp(vNewCounter), \"<table margin=0 cellpadding=0 cellspacing=6>%list<\/table>\", \n\t\t\t\t\t\"<tr><td><b>%key:<\/b><\/td><td>%value<\/td> <\/tr>\", \"\") + \n\t\t\t\t\"<\/html> | | LABEL | SPAN=TRUE\"]\n\t\t[abort(input(\"header | \" + vUpdateMsg + \" | | LABEL | SPAN=TRUE\" + vEditMsg))]\t\t\t\n\t\t[vCustomCounters = json.path.delete(vCustomCounters, \n\t\t\t\".[?(@.name == '\" + vCounterName + \"')]\")]\n\t};{}]\n\t\n\t[vCustomCounters = json.append(vCustomCounters, vNewCounter)]\n\t[h: \"<!-- Use getProperty() for compatibility -->\"]\n\t[h: setProperty(vPropertyName, vCustomCounters)]\t\n\t[macro(vThisMacro): \"\"]\n};{}]\n\n[h, if(vInfo): log.info(\"Done!\")]",
        "maxWidth": "",
        "tooltip": "<html><body style=\"width:200px\">\nAdd, Edit, and Remove custom counters on a token.\n<hr>\nConfigure this macro to fit your game, then place on the Campaign or GM panel. You can also place onto tokens or call from another token macro using the [macro():] roll option.\n<\/body><\/html>",
        "applyToSelected": true,
        "compare":       [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":       {
          "uuid": "009c282e-e6d2-4693-b74f-f3f74cfee96a",
          "commandChecksum": "fef7ab970c1b4ecf703cc2718f2a55c5",
          "propsChecksum": "cda1d8e1de1c07c7cf9d7fd5edf2ed03"
        }
      },
          {
        "autoExecute": true,
        "color": "default",
        "fontColor": "default",
        "group": "2. Template Adjustment Macro",
        "includeLabel": false,
        "sortBy": "",
        "index": 3,
        "label": "Adjust Counter",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[h, code: { \"\n<!--Call this macro from any other macro to increment a custom counter. \n\tExpects two arguments: \n\n\tCounterName - the exact name of the counter.\n\tCounterCost - The counter cost. A negative value will instead ADD to the counter.\n\t-->\" }]\n\n[h: \"<!-- Set Countername and Cost. Negative costs ADD to the counter. -->\"]\n[h: vCounterName = \"\"]\n[h: vCounterCost = 0]\n\n[h: \"<!-- get JSON arguments as variables and quit if no counter name is set. -->\"]\n[h: json.toVars(macro.args, \"v\")]\n[h: assert(if(vCounterName == \"\", 0, 1), \"No CounterName set.\", 0)]\n\n[h: \"<!-- Counter Options -->\"]\n[h: \"<!-- Set vCustomCounterMacro to and empty string/blank if you don't want to refresh the frame. -->\"]\n[h: vCustomCounterMacro = \"Custom Counters@Lib:CustomCounters\"]\n[h: vPropertyName = \"CustomCounters\"]\n\n[h: \"<!-- Grab Counter Info -->\"]\n[h: vCustomCounters = getProperty(vPropertyName)]\n[h: vCounter = json.get(json.path.read(vCustomCounters, '.[?(@.name == \"' + vCounterName + '\")]'), 0)]\n[h: vCounterIndex = json.indexOf(vCustomCounters, vCounter)]\n[h: vCounterValue = json.get(vCounter, \"value\")]\n[h: vCounterMax = json.get(vCounter, \"max\")]\n[h: vNewCounterValue = vCounterValue - vCounterCost]\t\n\n[h: vMsg = \"\"]\n[h, if(vNewCounterValue < 0), code: {\n\t<!-- Add/edit code here that triggers when the token does not have enough of the counter available. -->\n\t[h, if(vCounterMax != \"\"): vCounterMax = \"/\" + vCounterMax]\n\t[vMsg = token.name + \" can't \" + if(vCounterCost > 0, \"spend\", \"gain\") + \" \" + floor(math.abs(vCounterCost)) + \n\t\t\t\" <b>\" + vCounterName + \"<\/b> (\" + vCounterValue + vCounterMax + \").\"]\n};{\t\n\t<!-- Check for the maximum value. -->\n\t[if(isNumber(vCounterMax)), code: {\t\n\t\t[if(vNewCounterValue > vCounterMax): vNewCounterValue = vCounterMax]\n\t\t[vCounterMax = \"/\" + vCounterMax]\t\n\t};{}]\n\t\n\t<!-- Alter the counter and reload the Custom Counters frame if present. -->\t\t\n\t[vCounter = json.set(vCounter, \"value\", vNewCounterValue)]\n\t[vCustomCounters = json.set(vCustomCounters, vCounterIndex, vCounter)]\n\t[setProperty(vPropertyName, vCustomCounters)]\n\t[if(vCustomCounterMacro != \"\" && isFrameVisible(\"Custom Counters\")), code: { [macro(vCustomCounterMacro):\"\"] };{}]\n\n\t<!-- Add/edit additional code here when the token successfully adjusts this counter. -->\n\t[if(vCounterValue != vNewCounterValue) :\n\t\tvMsg = token.name + \" adjusted counter <b>\" + vCounterName + \n\t\t\t\"<\/b> from \" + vCounterValue + \" to <b>\" + vNewCounterValue + vCounterMax + \"<\/b>.\";\n\t\tvMsg = token.name + \" can't \" + if(vCounterCost > 0, \"spend\", \"gain\") + \" \" + floor(math.abs(vCounterCost)) + \n\t\t\t\" <b>\" + vCounterName + \"<\/b> (\" + vCounterValue + vCounterMax + \").\"]\n}]\n\n[h, if(vMsg != \"\"): broadcast(vMsg)]",
        "maxWidth": "",
        "tooltip": "<html><body style=\"width:200px\">\nAdjusts a counter by a given cost.\n<hr>\nMeant to be copied and edited, or called from other macros with a JSON object with the values 'CounterName' and 'CounterCost'. Note that a negative cost will ADD to the counter up to the counter's maximum (if any).\n<\/html>",
        "applyToSelected": false,
        "compare":       [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":       {
          "uuid": "559bc845-7ad3-4b6b-8756-25c69c13755f",
          "commandChecksum": "b6cbb62609dfb54fe54028f9ac516084",
          "propsChecksum": "f2440073d2ee82dcba38bfe6622e1038"
        }
      },
          {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "3. Examples",
        "includeLabel": false,
        "sortBy": "",
        "index": 5,
        "label": "Shoot Arrow",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[macro(\"Adjust Counter@Lib:CustomCounters\"): json.set(\"{}\",\n\t\"CounterName\", \"Arrows\",\n\t\"CounterCost\", 1)]",
        "maxWidth": "",
        "tooltip": "Reduces the 'Arrows' counter on token this macro is on by 1.",
        "applyToSelected": false,
        "compare":       [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":       {
          "uuid": "0205268a-ff5f-4b71-acd7-06f106a9f16e",
          "commandChecksum": "fe39bed6a1fc3ec931062457cd239dfb",
          "propsChecksum": "0c693758663889700084be03c7de3287"
        }
      },
          {
        "autoExecute": true,
        "color": "default",
        "fontColor": "black",
        "group": "3. Examples",
        "includeLabel": false,
        "sortBy": "",
        "index": 7,
        "label": "Find Arrow",
        "fontSize": "1.00em",
        "minWidth": "",
        "playerEditable": false,
        "command": "[macro(\"Adjust Counter@Lib:CustomCounters\"): json.set(\"{}\",\n\t\"CounterName\", \"Arrows\",\n\t\"CounterCost\", -1)]",
        "maxWidth": "",
        "tooltip": "Adds to the 'Arrows' counter on token this macro is on by 1.",
        "applyToSelected": false,
        "compare":       [
          "group",
          "sortPrefix",
          "command",
          "includeLabel",
          "autoExecute",
          "applyToSelected"
        ],
        "metadata":       {
          "uuid": "6e66614d-b273-4e02-88cd-32262083b72c",
          "commandChecksum": "6c40df9b788cdea188f18ba450a7f8f4",
          "propsChecksum": "0d154fb4f270d4f50b853da8755c1685"
        }
      }
    ]
  }
